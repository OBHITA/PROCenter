<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pillar.Common.Castle</name>
    </assembly>
    <members>
        <member name="T:Pillar.Common.Commands.CommandFactory">
            <summary>
                Factory for creating commands.
            </summary>
        </member>
        <member name="M:Pillar.Common.Commands.CommandFactory.#ctor(Pillar.Common.InversionOfControl.IContainer,Castle.DynamicProxy.ProxyGenerator)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.Common.Commands.CommandFactory"/> class.
            </summary>
            <param name="container">The Pillar IoC container.</param>
            <param name="proxyGenerator">The proxy generator.</param>
        </member>
        <member name="M:Pillar.Common.Commands.CommandFactory.Build``2(``1,System.Linq.Expressions.Expression{System.Func{System.Windows.Input.ICommand}},System.Action,System.Func{System.Boolean})">
            <summary>
                Builds the specified owner.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="owner">The owner.</param>
            <param name="propertyExpression">The property expression.</param>
            <param name="executeMethod">The execute method.</param>
            <param name="canExecuteMethod">The can execute method.</param>
            <returns>Build command.</returns>
        </member>
        <member name="M:Pillar.Common.Commands.CommandFactory.Build``3(``1,System.Linq.Expressions.Expression{System.Func{System.Windows.Input.ICommand}},System.Action{``2},System.Func{``2,System.Boolean})">
            <summary>
                Builds the specified owner.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <typeparam name="TParameter">The type of the parameter.</typeparam>
            <param name="owner">The owner.</param>
            <param name="propertyExpression">The property expression.</param>
            <param name="executeMethod">The execute method.</param>
            <param name="canExecuteMethod">The can execute method.</param>
            <returns>Built command.</returns>
        </member>
        <member name="M:Pillar.Common.Commands.CommandFactory.Build``2(Pillar.Common.Commands.IFrameworkCommandInfo,``0)">
            <summary>
                Builds the specified framework command info.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="frameworkCommandInfo">The framework command info.</param>
            <param name="commandInstance">The command instance.</param>
            <returns>Built command.</returns>
        </member>
        <member name="T:Pillar.Common.Commands.NamespaceDoc">
            <summary>
                The <see cref="N:Pillar.Common.Commands"/> namespace contains common command classes and functionality.
            </summary>
        </member>
        <member name="T:Pillar.Common.Registry">
            <summary>
                This class defines dependency mapping for this Pillar assembly.
                These mappings will be registered when <see cref="T:Pillar.Common.InversionOfControl.IoC"/>.Bootstrap method is called.
            </summary>
        </member>
        <member name="M:Pillar.Common.Registry.Register">
            <summary>
                Registers dependencies using the <see cref="T:Pillar.Common.InversionOfControl.IoC"/>.Container.
            </summary>
        </member>
    </members>
</doc>
