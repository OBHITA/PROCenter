<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pillar.FluentRuleEngine</name>
    </assembly>
    <members>
        <member name="T:Pillar.FluentRuleEngine.AbstractRuleCollection`1">
            <summary>
                Abstract class used when Creating an <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1"/>
            </summary>
            <typeparam name="TSubject"> Type of subject Rule Collection is for. </typeparam>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IRuleCollection`1">
            <summary>
                Interface for the Collection of Rules.
            </summary>
            <typeparam name="TSubject">Type of the subject of the Rule Collection.</typeparam>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRuleCollection`1.IsInitialized">
            <summary>
                Gets or sets a value indicating whether this instance is initialized.
            </summary>
            <value>
                <c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pillar.FluentRuleEngine.AbstractRuleCollection`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.AbstractRuleCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.AbstractRuleCollection`1.AddRules(Pillar.FluentRuleEngine.IRuleCollection{`0})">
            <summary>
                Adds rules from another collection to this collection.
            </summary>
            <param name="ruleCollection"> RuleCollection to get rules from. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.AbstractRuleCollection`1.AutoValidateAllPropertyRules(System.Action)">
            <summary>
                Sets Auto Validation to true for all property rules created in Action.
            </summary>
            <param name="action"> The action. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.AbstractRuleCollection`1.DoNotAutoValidateAllPropertyRules(System.Action)">
            <summary>
                Sets Auto Validation to false for all property rules created in Action.
            </summary>
            <param name="action"> The action. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.AbstractRuleCollection`1.GetEnumerator">
            <summary>
                Gets an Enumerator for the Rule Collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.AbstractRuleCollection`1.NewCollectionPropertyRule``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Creates and adds a New Collection Property Rule to the Collection.
            </summary>
            <typeparam name="TProperty">
                Type of property the rule will be set to. Must be <see cref="T:Pillar.FluentRuleEngine.ICollectionPropertyRule"/>
            </typeparam>
            <param name="propertyExpression"> Expression to property rule will be set to. </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.ICollectionPropertyRuleBuilderInitializer`2"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.AbstractRuleCollection`1.NewPropertyRule``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Creates and adds a New Property Rule to the Collection.
            </summary>
            <typeparam name="TProperty">
                Type of property the rule will be set to. Must be <see cref="T:Pillar.FluentRuleEngine.IPropertyRule"/>
            </typeparam>
            <param name="propertyExpression"> Expression to property rule will be set to. </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilderInitializer`2"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.AbstractRuleCollection`1.NewRule``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Creates and adds a New Rule to the Collection.
            </summary>
            <typeparam name="TProperty">
                Type of property the rule will be set to. Must be <see cref="T:Pillar.FluentRuleEngine.IRule"/>
            </typeparam>
            <param name="propertyExpression"> Expression to property the rule will be set to. </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilderInitializer`2"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.AbstractRuleCollection`1.NewRuleSet``1(System.Linq.Expressions.Expression{System.Func{``0}},Pillar.FluentRuleEngine.IRule[])">
            <summary>
                Creates a new <see cref="T:Pillar.FluentRuleEngine.RuleSet"/> for the Collection.
            </summary>
            <typeparam name="TProperty">
                Type of property the rule set will be set to. Must be <see cref="T:Pillar.FluentRuleEngine.IRuleSet"/>
            </typeparam>
            <param name="propertyExpression"> Expression to the property the rule set will be set to. </param>
            <param name="rules"> Rules to add to the Rule Set. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.AbstractRuleCollection`1.NewSpecificationRule``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Creates and adds a New Specification Rule to the Collection.
            </summary>
            <typeparam name="TProperty">
                Type of property the rule will be set to. Must be <see cref="T:Pillar.FluentRuleEngine.ISpecificationRule"/>
            </typeparam>
            <param name="propertyExpression"> Expression to property rule will be set to. </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.ISpecificationRuleBuilderInitializer`2"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.AbstractRuleCollection`1.ShouldRunWhen(System.Predicate{`0},System.Action)">
            <summary>
                Adds a ShouldRunClause to the rules added in the <see cref="T:System.Action"/>.
            </summary>
            <param name="shouldRunClause">
                <see cref="T:System.Predicate`1"/> when rule should run.
            </param>
            <param name="action">
                <see cref="T:System.Action"/> that creates the rules.
            </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.AbstractRuleCollection`1.ShouldRunWhen(System.Func{`0,Pillar.FluentRuleEngine.RuleEngineContext{`0},System.Boolean},System.Action)">
            <summary>
                Adds a ShouldRunClause to the rules added in the <see cref="T:System.Action"/>.
            </summary>
            <param name="shouldRunClause">
                <see cref="T:System.Func`3"/> when rule should run.
            </param>
            <param name="action">
                <see cref="T:System.Action"/> that creates the rules.
            </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.AbstractRuleCollection`1.AddRule(Pillar.FluentRuleEngine.IRule)">
            <summary>Adds the rule.</summary>
            <param name="rule">The rule.</param>
        </member>
        <member name="P:Pillar.FluentRuleEngine.AbstractRuleCollection`1.AutoValidatePropertyRules">
            <summary>
                Gets or sets a value indicating whether to auto validate property rules.
            </summary>
            <value>
                <c>true</c> if [auto validate]; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:Pillar.FluentRuleEngine.AbstractRuleCollection`1.IsInitialized">
            <summary>
                Gets or sets a value indicating whether this instance is initialized.
            </summary>
            <value>
                <c>true</c> if this instance is initialized; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="T:Pillar.FluentRuleEngine.ErrorMessageProvider">
            <summary>
            The <see cref="T:Pillar.FluentRuleEngine.ErrorMessageProvider"/> retrieves error messages for rules in a rule collection
            from resource files.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IErrorMessageProvider">
            <summary>
                The <see cref="T:Pillar.FluentRuleEngine.IErrorMessageProvider"/> is used to retrieve error messages for a given
                rule collection.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IErrorMessageProvider.GetErrorMessage``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the error message for the given rule object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyExpression">The property expression.</param>
            <returns>
                An error message.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IErrorMessageProvider.GetErrorMessage``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the error message.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="objectInstance">The object instance.</param>
            <param name="propertyExpression">The property expression.</param>
            <returns>An error message.</returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IErrorMessageProvider.GetErrorMessage(System.Type,System.String)">
            <summary>
                Gets the error message.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="name">The name.</param>
            <returns>An error message.</returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ErrorMessageProvider.GetErrorMessage``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the error message for the given rule object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyExpression">The property expression.</param>
            <returns>
            An error message.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ErrorMessageProvider.GetErrorMessage``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the error message.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="objectInstance">The object instance.</param>
            <param name="propertyExpression">The property expression.</param>
            <returns>An error message.</returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ErrorMessageProvider.GetErrorMessage(System.Type,System.String)">
            <summary>
            Gets the error message.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="name">The name.</param>
            <returns>
            An error message.
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.EmptyRuleCollection`1">
            <summary>
                A rule collection for the given TSubject that contains no rules.
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
        </member>
        <member name="T:Pillar.FluentRuleEngine.ConstraintExtensions">
            <summary>
                Extension methods for Constraints.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.CannotBeFutureDate``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2})">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of GreaterThan todays date to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.EqualTo``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},``2)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of EqualTo to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="compareValue">Value to compare to value of property.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.EqualToContextObject``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},System.String)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.ContextObjectInlineConstraint`1"/> of EqualTo to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="contextObjectName">Optional Name of ContextObject.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.ExclusiveBetween``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},``2,``2)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of ExclusiveBetween to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="startValue">Start Value to use in comparison to property value.</param>
            <param name="endValue">End Value to use in comparison to property value.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.GreaterThan``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},``2)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of GreaterThan to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="compareValue">Value to compare to value of property.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.GreaterThanContextObject``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},System.String)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.ContextObjectInlineConstraint`1"/> of GreaterThan to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="contextObjectName">Optional Name of ContextObject.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.GreaterThanOrEqualTo``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},``2)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of GreaterThanOrEqualTo to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="compareValue">Value to compare to value of property.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.GreaterThanOrEqualToContextObject``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},System.String)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.ContextObjectInlineConstraint`1"/> of GreaterThanOrEqualTo to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="contextObjectName">Optional Name of ContextObject.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.InList``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},``2[])">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of InList to the Rule.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyRuleBuilder">The property rule builder.</param>
            <param name="list">The list to check.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.InclusiveBetween``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},System.IComparable,System.IComparable)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of InclusiveBetween to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="startValue">Start Value to use in comparison to property value.</param>
            <param name="endValue">End Value to use in comparison to property value.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.InclusiveBetweenOrNull``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},System.IComparable,System.IComparable)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of InclusiveBetween or null to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="startValue">Start Value to use in comparison to property value.</param>
            <param name="endValue">End Value to use in comparison to property value.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.LessThen``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},``2)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of LessThen to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="compareValue">Value to compare to value of property.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.LessThenContextObject``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},System.String)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.ContextObjectInlineConstraint`1"/> of LessThen to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="contextObjectName">Optional Name of ContextObject.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.LessThenOrEqualTo``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},``2)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of LessThenOrEqualTo to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="compareValue">Value to compare to value of property.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.LessThenOrEqualToContextObject``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},System.String)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.ContextObjectInlineConstraint`1"/> of LessThenOrEqualTo to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="contextObjectName">Optional Name of ContextObject.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.MatchesRegex``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},System.String)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of Regex Match to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="regexString">Regex string to check match on property value.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.MaxLength``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},System.Int32)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of MaxLength to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="maxLength">Max Length property value can be.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.MeetsSpecification``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},Pillar.Common.Specification.ISpecification{``2},System.String)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of Specification to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="specification">
                <see cref="T:Pillar.Common.Specification.ISpecification`1"/> to use in Constraint.
            </param>
            <param name="violationMessage">Violation message to use in Constraint.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.MinLength``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},System.Int32)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of MinLength to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="minLength">Min Length property value can be.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.NotEmpty``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2})">
            <summary>
                Adds a <see cref="T:Pillar.FluentRuleEngine.Constraints.NotEmptyConstraint"/> to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.NotEqualTo``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},``2)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of NotEqualTo to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="compareValue">Value to compare to value of property.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.NotEqualToContextObject``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2},System.String)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.ContextObjectInlineConstraint`1"/> of NotEqualTo to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="contextObjectName">Optional Name of ContextObject.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.NotNull``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2})">
            <summary>
                Adds a <see cref="T:Pillar.FluentRuleEngine.Constraints.NotNullConstraint"/> to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ConstraintExtensions.Null``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``0,``1,``2})">
            <summary>
                Adds a <see cref="T:Pillar.FluentRuleEngine.Constraints.NullConstraint"/> to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Constraints.ConstraintBase">
            <summary>
                Abstract base class for <see cref="T:Pillar.FluentRuleEngine.Constraints.IConstraint">IConstraint</see>.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Constraints.IConstraint">
            <summary>
                Interface for defining a constraint.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.IConstraint.IsCompliant(System.Object,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Gets whether the <paramref name="propertyValue">propertyValue</paramref> is compliant with the constraint.
            </summary>
            <param name="propertyValue">Object to test for compliancy.</param>
            <param name="ruleEngineContext">Current Rule Engine Context.</param>
            <returns>
                A <see cref="T:System.Boolean">Boolean</see>.
            </returns>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Constraints.IConstraint.Message">
            <summary>
                Gets the Error Message for the constraint.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.ConstraintBase.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Constraints.ConstraintBase"/> class.
            </summary>
            <param name="message">Message used for constraint.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.ConstraintBase.IsCompliant(System.Object,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <inheritdoc />
        </member>
        <member name="P:Pillar.FluentRuleEngine.Constraints.ConstraintBase.Message">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.Constraints.ContextObjectInlineConstraint`1">
            <summary>
                A <see cref="T:Pillar.FluentRuleEngine.Constraints.IConstraint">Constraint</see> that requires property and context object of same type to satisfy a Function.
            </summary>
            <typeparam name="TProperty">Type of property.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.ContextObjectInlineConstraint`1.#ctor(System.Func{`0,`0,System.Boolean},System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Constraints.ContextObjectInlineConstraint`1"/> class.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.ContextObjectInlineConstraint`1.#ctor(System.Func{`0,`0,System.Boolean},System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Constraints.ContextObjectInlineConstraint`1"/> class.
            </summary>
            <param name="predicate">
                <see cref="T:System.Func`3">Predicate</see> to meet.
            </param>
            <param name="contextObjectName">Name of contextObject.</param>
            <param name="message">Error Message for Constraint.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.ContextObjectInlineConstraint`1.IsCompliant(System.Object,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.Constraints.IHandleAddingRuleViolations">
            <summary>
                Interface for indicating a constraint handles its own reporting of rule violations.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1">
            <summary>
                A <see cref="T:Pillar.FluentRuleEngine.Constraints.IConstraint">Constraint</see> that requires object to be satisfy Predicate.
            </summary>
            <typeparam name="TProperty">Type of property.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1.#ctor(System.Predicate{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> class.
            </summary>
            <param name="predicate">
                <see cref="T:System.Predicate`1">Predicate</see> to satisfy.
            </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1.#ctor(System.Predicate{`0},System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> class.
            </summary>
            <param name="predicate">
                <see cref="T:System.Predicate`1">Predicate</see> to satisfy.
            </param>
            <param name="message">Message to show if constraint is not met.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1.IsCompliant(System.Object,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.Constraints.NotEmptyConstraint">
            <summary>
                A <see cref="T:Pillar.FluentRuleEngine.Constraints.IConstraint">Constraint</see> that requires object to not be empty.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.NotEmptyConstraint.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Constraints.NotEmptyConstraint"/> class.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.NotEmptyConstraint.IsCompliant(System.Object,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.Constraints.NotNullOrWhiteSpaceConstraint">
            <summary>
                A <see cref="T:Pillar.FluentRuleEngine.Constraints.IConstraint">Constraint</see> that requires object to not be null or white space.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.NotNullOrWhiteSpaceConstraint.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Constraints.NotNullOrWhiteSpaceConstraint"/> class.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.NotNullOrWhiteSpaceConstraint.IsCompliant(System.Object,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.Constraints.NotNullConstraint">
            <summary>
                A <see cref="T:Pillar.FluentRuleEngine.Constraints.IConstraint">Constraint</see> that requires object to not be null.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.NotNullConstraint.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Constraints.NotNullConstraint"/> class.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.NotNullConstraint.IsCompliant(System.Object,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.Constraints.NullConstraint">
            <summary>
                A <see cref="T:Pillar.FluentRuleEngine.Constraints.IConstraint">Constraint</see> that requires object to be null.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.NullConstraint.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Constraints.NullConstraint"/> class.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.NullConstraint.IsCompliant(System.Object,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.Constraints.RelationshipConstrain`2">
            <summary>
                A <see cref="T:Pillar.FluentRuleEngine.Constraints.IConstraint">Constraint</see> that requires object to be satisfy relationship with other objects in the subject.
            </summary>
            <typeparam name="TProperty">Type of property.</typeparam>
            <typeparam name="TSubject">Type of subject.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.RelationshipConstrain`2.#ctor(System.Func{`0,`1,System.Boolean})">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Constraints.RelationshipConstrain`2"/> class.
            </summary>
            <param name="predicate">
                <see cref="T:System.Predicate`1">Predicate</see> to satisfy.
            </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.RelationshipConstrain`2.#ctor(System.Func{`0,`1,System.Boolean},System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Constraints.RelationshipConstrain`2"/> class.
            </summary>
            <param name="predicate">
                <see cref="T:System.Predicate`1">Predicate</see> to satisfy.
            </param>
            ///
            <param name="message">Message to show if constraint is not met.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.RelationshipConstrain`2.IsCompliant(System.Object,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.Constraints.RuleCollectionConstraint`1">
            <summary>
                A <see cref="T:Pillar.FluentRuleEngine.Constraints.IConstraint">Constraint</see> that requires object to satisfy all rules in a Rule Collection.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.RuleCollectionConstraint`1.#ctor(Pillar.FluentRuleEngine.IRuleCollection{`0},Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Constraints.RuleCollectionConstraint`1"/> class.
            </summary>
            <param name="ruleCollection">Rule Collection property must satisfy.</param>
            <param name="ruleSelector">
                Optional Rule selector for selecting rules in <paramref name="ruleCollection"/>
            </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Constraints.RuleCollectionConstraint`1.IsCompliant(System.Object,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.ContextEntry">
            <summary>
                Class used for items added to <see cref="T:Pillar.FluentRuleEngine.WorkingMemory"/>
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.ContextEntry.ContextObject">
            <summary>
                Gets or sets the context object.
            </summary>
            <value>
                The context object.
            </value>
        </member>
        <member name="P:Pillar.FluentRuleEngine.ContextEntry.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>
                The name of the entry.
            </value>
        </member>
        <member name="T:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions">
            <summary>
                Static class for <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> Extensions.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.CannotBeFutureDate``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2})">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of GreaterThan todays date to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.Constrain``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2},System.Predicate{System.Object},System.String)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> to the Rule.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TContextObject">The type of the context object.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="predicate">The predicate.</param>
            <param name="message">The message.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.EqualTo``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2},System.IComparable)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of EqualTo to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="compareValue">Value to compare to value of property.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.ExclusiveBetween``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2},System.IComparable,System.IComparable)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of ExclusiveBetween to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="startValue">Start Value to use in comparison to property value.</param>
            <param name="endValue">End Value to use in comparison to property value.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.GreaterThan``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2},System.IComparable)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of GreaterThan to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="compareValue">Value to compare to value of property.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.GreaterThanOrEqualTo``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2},System.IComparable)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of GreaterThanOrEqualTo to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="compareValue">Value to compare to value of property.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.InclusiveBetween``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2},System.IComparable,System.IComparable)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of InclusiveBetween to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="startValue">Start Value to use in comparison to property value.</param>
            <param name="endValue">End Value to use in comparison to property value.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.LessThen``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2},System.IComparable)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of LessThen to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="compareValue">Value to compare to value of property.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.LessThenOrEqualTo``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2},System.IComparable)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of LessThenOrEqualTo to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="compareValue">Value to compare to value of property.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.MatchesRegex``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2},System.String)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of Regex Match to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="regexString">Regex string to check match on property value.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.MaxLength``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2},System.Int32)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of MaxLength to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="maxLength">Max Length property value can be.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.MeetsSpecification``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2},Pillar.Common.Specification.ISpecification{System.Object},System.String)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of Specification to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="specification">
                <see cref="T:Pillar.Common.Specification.ISpecification`1"/> to use in Constraint.
            </param>
            <param name="violationMessage">Violation message to use in Constraint.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.MinLength``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2},System.Int32)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of MinLength to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="minLength">Min Length property value can be.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.NotEmpty``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2})">
            <summary>
                Adds a <see cref="T:Pillar.FluentRuleEngine.Constraints.NotEmptyConstraint"/> to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.NotEqualTo``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2},System.IComparable)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> of NotEqualTo to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="compareValue">Value to compare to value of property.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.NotNull``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2})">
            <summary>
                Adds a <see cref="T:Pillar.FluentRuleEngine.Constraints.NotNullConstraint"/> to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.NotNullOrWhitespace``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2})">
            <summary>
                Adds a <see cref="T:Pillar.FluentRuleEngine.Constraints.NotNullOrWhiteSpaceConstraint"/> to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.Null``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2})">
            <summary>
                Adds a <see cref="T:Pillar.FluentRuleEngine.Constraints.NullConstraint"/> to the Rule.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContextObject">Type of property of the subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/> currently configuring the rule.
            </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.WithCollection``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2},Pillar.FluentRuleEngine.IRuleCollection{``2},Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector)">
            <summary>
                Adds a WhenClause to the rule that checks the context object against a rule collection that returns true if a rule violation occurs from rule collection.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TContextObject">The type of the context object.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="ruleCollection">The rule collection.</param>
            <param name="ruleSelector">The rule selector.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ContextObjectProviderRuleBuilderExtensions.WithProperty``3(Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder{``0,``1,``2},System.Linq.Expressions.Expression{System.Func{``2,System.Object}})">
            <summary>
                Adds a propertyExpression to the Context Object in the Rule Builder.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TContextObject">The type of the context object.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="propertyExpression">The property expression.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.DefaultWorkingMemoryGetStrategy">
            <summary>
                Default strategy for getting context entries.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IWorkingMemoryGetStrategy">
            <summary>
                Interface for Get Strategy of <see cref="T:Pillar.FluentRuleEngine.WorkingMemory"/>
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IWorkingMemoryGetStrategy.GetEntry(System.Collections.Generic.IList{Pillar.FluentRuleEngine.ContextEntry},System.Type,System.String)">
            <summary>
                Gets the entry.
            </summary>
            <param name="workingMemory">The working memory.</param>
            <param name="contextObjectType">Type of the context object.</param>
            <param name="name">The name of the context object.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.ContextEntry"/> or null if no entry exists.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.DefaultWorkingMemoryGetStrategy.GetEntry(System.Collections.Generic.IList{Pillar.FluentRuleEngine.ContextEntry},System.Type,System.String)">
            <summary>
                Gets the entry.
            </summary>
            <param name="workingMemory">The working memory.</param>
            <param name="contextObjectType">Type of the context object.</param>
            <param name="name">The name of the context object.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.ContextEntry"/> or null if no entry exists.
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IInternalRuleCollectionCustomizer`1">
            <summary>
                A generic inner interface for customizing a rule collection.
            </summary>
            <typeparam name="TSubject">The rule collection subject.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IInternalRuleCollectionCustomizer`1.Customize(Pillar.FluentRuleEngine.IRuleCollection{`0})">
            <summary>
                Customizes the <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1"/>.
            </summary>
            <param name="ruleCollection">
                <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1"/> to customize.
            </param>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IInternalRuleCollectionCustomizer`1.Priority">
            <summary>
                Gets the priority.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleEngineException">
            <summary>
                Base class for all rule engine exceptions.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineException"/> class.
            </summary>
            <param name="message"> The message. </param>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleEngineExecutor`1">
            <summary>
                The rule engine executor.
            </summary>
            <typeparam name="TSubject"> The type of the subject. </typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineExecutor`1"/> class.
            </summary>
            <param name="subject"> The subject. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.#ctor(`0,Pillar.FluentRuleEngine.IRuleCollection{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineExecutor`1"/> class.
            </summary>
            <param name="subject"> The subject. </param>
            <param name="ruleCollection"> The rule collection. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.#ctor(`0,Pillar.FluentRuleEngine.IRuleCollection{`0},Pillar.FluentRuleEngine.IRuleProcessor)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineExecutor`1"/> class.
            </summary>
            <param name="subject"> The subject. </param>
            <param name="ruleCollection"> The rule collection. </param>
            <param name="ruleProcessor"> The rule processor. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.Execute">
            <summary>
                Executes the rules.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.Execute(System.Action)">
            <summary>
                Executes the rules and, if there are no rule violations, calls the callback function.
            </summary>
            <param name="successCallBack"> The success call back. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.ForCurrentMethodRuleSet">
            <summary>
                Tells the builder to create a context that will only process rules in a rule set whose name matches 'method name + RuleSet'.
            </summary>
            <returns> The rule engine builder. </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.ForPropertyRuleSet``1(System.Linq.Expressions.Expression{System.Func{System.Action{``0}}})">
            <summary>
                Tells the builder to create a context that will only process rules in a rule set whose name matches 'property name + RuleSet'.
            </summary>
            <typeparam name="TProperty"> The type of the property. </typeparam>
            <param name="propertyExpression"> The method expression. </param>
            <returns> The rule engine builder. </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.ForRuleSet(System.String)">
            <summary>
                Tells the builder to create a context that will only process rules for the given rule set.
            </summary>
            <param name="ruleSetName"> Name of the rule set. </param>
            <returns> The rule engine builder. </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.ForSelectedRules(Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector)">
            <summary>
                Tells the builder to create a context that will only process the rules that the rule selector chooses.
            </summary>
            <param name="ruleSelector"> The rule selector. </param>
            <returns>The rule engine executor.</returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.WithContext``1(``0,System.String)">
            <summary>
                Adds a named context object.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="contextObject">The context object.</param>
            <param name="name">The name.</param>
            <returns>
                The rule engine builder.
            </returns>
            <exception cref="T:Pillar.FluentRuleEngine.RuleEngineException">You must initialize the rule engine with one of the 'For...' methods before adding context objects.</exception>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.WithContext``1(``0)">
            <summary>
                Adds a context object.
            </summary>
            <typeparam name="TContext"> The type of the context. </typeparam>
            <param name="contextObject"> The context object. </param>
            <returns> The rule engine builder. </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.WithNameProvider(Pillar.FluentRuleEngine.NameProviders.INameProvider)">
            <summary>
                Registers a name provider to override the default.
            </summary>
            <param name="nameProvider"> The name provider. </param>
            <returns> The rule engine builder. </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.WithRuleViolationReporter(Pillar.FluentRuleEngine.IRuleViolationReporter)">
            <summary>
                Registers a rule violation reporter to override the default.
            </summary>
            <param name="ruleViolationReporter"> The rule violation reporter. </param>
            <returns> The rule engine builder. </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.AfterExecute(Pillar.FluentRuleEngine.IRuleEngineContext,Pillar.FluentRuleEngine.RuleExecutionResult)">
            <summary>
                Runs after to executing the rules.
            </summary>
            <param name="context">The context.</param>
            <param name="ruleExecutionResult">The rule execution result.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.BeforeExecute(Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Runs prior to executing the rules.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineExecutor`1.CreateRuleEngineContext(Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector)">
            <summary>
                Creates the rule engine context.
            </summary>
            <param name="ruleSelector"> The rule selector. </param>
            <returns> A rule engine context. </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IAttributeCollection">
            <summary>
                Collection of Attributes.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IAttributeCollection.Item(System.String)">
            <summary>
                Gets the list of objects with the specified key.
            </summary>
            <param name="key">Key to find.</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1"/> of objects.
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.ICollectionPropertyRule">
            <summary>
                Interface for a <see cref="T:Pillar.FluentRuleEngine.Rules.CollectionPropertyRule">CollectionPropertyRule</see>
                This is a rule that tells the engine which <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">rule collection</see> to use when this rule is run.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IRule">
            <summary>
                Interface for a Rule.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRule.ShouldRunRule(Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Gets whether rule should be run in this context.
            </summary>
            <param name="ruleEngineContext">RuleEngineContext of current run.</param>
            <returns>
                A <see cref="T:System.Boolean">Boolean</see>.
            </returns>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRule.Attributes">
            <summary>
                Gets the attributes.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRule.ElseThenClauses">
            <summary>
                Gets the <see cref="T:System.Collections.Generic.IEnumerable`1">List of ElseThenClauses</see> of the rule.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRule.IsDisabled">
            <summary>
                Gets or sets a value indicating whether this instance is disabled.
            </summary>
            <value>
                <c>True</c> if this instance is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRule.Name">
            <summary>
                Gets the name of the rule.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRule.Priority">
            <summary>
                Gets the priority of the rule.
            </summary>
            <value>
                The priority.
            </value>
            <remarks>
                Dictates the order the rule will get run (lower runs first).
            </remarks>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRule.ThenClauses">
            <summary>
                Gets the <see cref="T:System.Collections.Generic.IEnumerable`1">List of ThenClauses</see> of the rule.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRule.WhenClause">
            <summary>
                Gets the <see cref="T:System.Predicate`1">WhenClause</see> of the rule.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.ICollectionPropertyRule.WithRuleCollection``1(Pillar.FluentRuleEngine.IRuleCollection{``0},Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector)">
            <summary>
                Sets the <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">Rule Collection</see> and optionally the <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector">RuleSelector</see> to use.
            </summary>
            <typeparam name="TProperty">Type of the property of TSubject.</typeparam>
            <param name="ruleCollection">
                <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">Rule Collection</see> to run.
            </param>
            <param name="ruleSelector">
                Optional <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector">Rule Selector</see> for the <paramref name="ruleCollection">Rule Collection</paramref>
            </param>
        </member>
        <member name="T:Pillar.FluentRuleEngine.InvalidPropertyRuleException">
            <summary>
                Exception thrown by <see cref="T:Pillar.FluentRuleEngine.IPropertyRule">Property Rules</see>.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.InvalidRuleException">
            <summary>
                Exception that is thrown for invalid rules.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.InvalidRuleException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.InvalidRuleException"/> class.
            </summary>
            <param name="message">Message to initialize rule with.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.InvalidPropertyRuleException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.InvalidPropertyRuleException"/> class.
            </summary>
            <param name="message">Message to initialize exception with.</param>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IPropertyRule">
            <summary>
                Interface for a <see cref="T:Pillar.FluentRuleEngine.Rules.PropertyRule">Property Rule</see>.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IPropertyRule.Constraints">
            <summary>
                Gets the <see cref="T:System.Collections.Generic.IEnumerable`1">constraints</see> of the rule.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IPropertyRule.PropertyChain">
            <summary>
                Gets the PropertyChain of the rule.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IPropertyRule.PropertyExpression">
            <summary>
                Gets the PropertyExpression of the rule.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IRuleCollectionCustomizer`2">
            <summary>
                An IRuleCollectionCustomizer is an interface that you can
                place over an existing rule collection to allow it to customize
                a base set of rules.  For example, Iowa could create a
                PatientRuleCollection that adds additional rules for
                Patient.  By adding the IRuleCollectionCustomizer interface
                allows it to change the rules in the base set of patient rules.
            </summary>
            <typeparam name="TRuleCollection">Actual type of the Rule Collection you are customizing.</typeparam>
            <typeparam name="TSubject">Type of subject Rule Collection is written for.</typeparam>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IRuleCollectionFactory">
            <summary>
                Interface for the factory of <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">Rule Collections.</see>
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleCollectionFactory.CreateRuleCollection``1">
            <summary>
                Creates a <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">Rule Collection</see>.
            </summary>
            <typeparam name="TSubject">Type of the subject of the Rule Collection.</typeparam>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">RuleCollection&lt;TSubject&gt;</see>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleCollectionFactory.CustomizeRuleCollection``1(Pillar.FluentRuleEngine.IRuleCollection{``0},System.Boolean)">
            <summary>
                Customizes a <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">Rule Collection</see>.
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <param name="ruleCollection">The rule collection.</param>
            <param name="useBaseClass">
                Set to true if the rule collection base class contains the rule properties to customize.  This is
                useful in situations where the actual class is compiled at runtime such as Razor views.
            </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleCollectionFactory.CreateRuleCollection(System.Type)">
            <summary>
            Creates the rule collection.
            </summary>
            <param name="subjectType">Type of subject of the rule collection.</param>
            <returns>A rule collection object.</returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IRuleEngine">
            <summary>
                Interface for Defining a RuleEngine for running rules in a RuleCollection.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleEngine.ExecuteRules(Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Executes Rules using specified <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/>
            </summary>
            <param name="ruleEngineContext">Context to use when executing rules.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.RuleExecutionResult"/> containing the results of the execution pass.
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IRuleEngine`1">
            <summary>
                Interface for Defining a RuleEngine for running rules in a RuleCollection.
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleEngine`1.ExecuteAllRules(`0)">
            <summary>
                Executes All Rules in the Rule Collection.
            </summary>
            <param name="subject">Subject to run rules on.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.RuleExecutionResult"/> containing the results from executing the Rules.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleEngine`1.ExecuteRuleSet(`0,System.String)">
            <summary>
                Executes rules that are part of a Rule Set in the Rule Collection of the Rule Engine.
            </summary>
            <param name="subject">Subject the rules are run against.</param>
            <param name="ruleSetName">The Rule Set name of the rules to execute..</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.RuleExecutionResult"/> containing the results of the execution pass.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleEngine`1.ExecuteSelectedRules(`0,Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector)">
            <summary>
                Executes rules selected by the rule selector in the Rule Collection of the Rule Engine.
            </summary>
            <param name="subject">Subject the rules are run against.</param>
            <param name="ruleSelector">
                The <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector">Rule Selector</see> to determine the list of rules that will be executed.
            </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.RuleExecutionResult"/> containing the results of the execution pass.
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IRuleEngineContext">
            <summary>
                Interface for the context of a <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">Rule Engine</see>.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleEngineContext.AddParentContext(Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Sets the ParentContext.
            </summary>
            <param name="ruleEngineContext">
                <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext">RuleEngineContext</see> of the parent <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">Rule Engine</see> .
            </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleEngineContext.Refresh">
            <summary>
                Refreshes the context.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRuleEngineContext.NameProvider">
            <summary>
                Gets the <see cref="T:Pillar.FluentRuleEngine.NameProviders.INameProvider">Name Provider</see>.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRuleEngineContext.ParentContext">
            <summary>
                Gets the Parent Rule Engine Context
                This will be set if a running rule engine triggered the running of another Rule Collection.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRuleEngineContext.RuleSelector">
            <summary>
                Gets the <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector">Rule Selector</see>.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRuleEngineContext.RuleViolationReporter">
            <summary>
                Gets the <see cref="T:Pillar.FluentRuleEngine.IRuleViolationReporter">Rule Violation Reporter</see>.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRuleEngineContext.Subject">
            <summary>
                Gets the subject.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRuleEngineContext.WorkingMemory">
            <summary>
                Gets the <see cref="P:Pillar.FluentRuleEngine.IRuleEngineContext.WorkingMemory">Working Memory</see>.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IRuleEngineFactory">
            <summary>
                Interface for class that is the factory for <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">Rule Engines</see>
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleEngineFactory.CreateRuleEngine``1">
            <summary>
                Creates the <see cref="T:Pillar.FluentRuleEngine.RuleEngine`1">Rule Engine</see> for the given TSubject.
            </summary>
            <typeparam name="TSubject"> The Type of the subject for the rules. </typeparam>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">Rule Engine</see> .
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleEngineFactory.CreateRuleEngine``1(``0)">
            <summary>
                Creates the <see cref="T:Pillar.FluentRuleEngine.RuleEngine`1">Rule Engine</see> for the given TSubject.
            </summary>
            <typeparam name="TSubject"> The Type of the subject for the rules. </typeparam>
            <param name="subject"> The subject. </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">Rule Engine</see> .
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleEngineFactory.CreateRuleEngine``1(``0,Pillar.FluentRuleEngine.IRuleCollection{``0})">
            <summary>
                Creates the <see cref="T:Pillar.FluentRuleEngine.RuleEngine`1">Rule Engine</see> using the given TSubject and
                <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">
                    Rule Collection
                </see>
                .
            </summary>
            <typeparam name="TSubject"> The type of the subject. </typeparam>
            <param name="subject"> The subject. </param>
            <param name="ruleCollection"> The rule collection. </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">Rule Engine</see> .
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleEngineFactory.CreateRuleEngine``1(``0,Pillar.FluentRuleEngine.IRuleCollection{``0},Pillar.FluentRuleEngine.IRuleProcessor)">
            <summary>
                Creates the <see cref="T:Pillar.FluentRuleEngine.RuleEngine`1">Rule Engine</see> using the given TSubject,
                <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">
                    Rule Collection
                </see>
                ,
                and <see cref="T:Pillar.FluentRuleEngine.IRuleProcessor">Rule Processor</see>.
            </summary>
            <typeparam name="TSubject"> The type of the subject. </typeparam>
            <param name="subject"> The subject. </param>
            <param name="ruleCollection"> The rule collection. </param>
            <param name="ruleProcessor"> The rule processor. </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">Rule Engine</see> .
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleEngineFactory.CreateRuleEngine``1(Pillar.FluentRuleEngine.IRuleCollection{``0})">
            <summary>
                Creates the <see cref="T:Pillar.FluentRuleEngine.RuleEngine`1">Rule Engine</see> using the given
                <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">
                    Rule Collection
                </see>
                .
            </summary>
            <typeparam name="TSubject"> The type of the subject. </typeparam>
            <param name="ruleCollection"> The rule collection. </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">Rule Engine</see> .
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleEngineFactory.CreateRuleEngine``1(Pillar.FluentRuleEngine.IRuleCollection{``0},Pillar.FluentRuleEngine.IRuleProcessor)">
            <summary>
                Creates the <see cref="T:Pillar.FluentRuleEngine.RuleEngine`1">Rule Engine</see> using the given
                <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">
                    Rule Collection
                </see>
                and <see cref="T:Pillar.FluentRuleEngine.IRuleProcessor">Rule Processor</see>.
            </summary>
            <typeparam name="TSubject"> The type of the subject. </typeparam>
            <param name="ruleCollection"> The rule collection. </param>
            <param name="ruleProcessor"> The rule processor. </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">Rule Engine</see> .
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleEngineFactory.CreateRuleEngine(System.Type)">
            <summary>
            Creates the rule engine.
            </summary>
            <param name="subjectType">Type of the subject.</param>
            <returns>A <see cref="T:Pillar.FluentRuleEngine.IRuleEngine"/>.</returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IRuleProcessor">
            <summary>
                Interface for processing a <see cref="T:Pillar.FluentRuleEngine.IRule">rule</see>.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleProcessor.Process(Pillar.FluentRuleEngine.IRuleEngineContext,Pillar.FluentRuleEngine.IRule)">
            <summary>
                Processes the rule using the context.
            </summary>
            <param name="ruleEngineContext">
                <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext">Rule Engine Context</see> to use when processing the rule.
            </param>
            <param name="rule">
                The <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see> to process.
            </param>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IRuleSet">
            <summary>
                Interface for a set of rules.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleSet.AddRule(Pillar.FluentRuleEngine.IRule)">
            <summary>
                Adds the rule.
            </summary>
            <param name="rule">The rule.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleSet.RemoveRule(Pillar.FluentRuleEngine.IRule)">
            <summary>
                Removes the rule.
            </summary>
            <param name="rule">The rule.</param>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRuleSet.Name">
            <summary>
                Gets the name of the rule set.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="T:Pillar.FluentRuleEngine.IRuleViolationReporter">
            <summary>
                The <see cref="T:Pillar.FluentRuleEngine.IRuleViolationReporter"/> interface provides the rule engine with a mechanism for reporting rule violations.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleViolationReporter.ClearViolations">
            <summary>
                Clears any current rule violations.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleViolationReporter.Publish">
            <summary>
                Publishes rule violations.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.IRuleViolationReporter.Report(Pillar.FluentRuleEngine.RuleViolation)">
            <summary>
                Reports a <see cref="T:Pillar.FluentRuleEngine.RuleViolation">RuleViolation</see> to the RuleViolationReporter.
            </summary>
            <param name="ruleViolation">
                <see cref="T:Pillar.FluentRuleEngine.RuleViolation">RuleViolation</see> to report.
            </param>
        </member>
        <member name="P:Pillar.FluentRuleEngine.IRuleViolationReporter.HasRuleViolation">
            <summary>
                Gets a value indicating whether this instance has rule violation.
            </summary>
            <value>
                <c>true</c> if this instance has a rule violation; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="T:Pillar.FluentRuleEngine.ISpecificationRule">
            <summary>
                Interface for a specification rule.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.NameProviders.INameProvider">
            <summary>
                Interface for Name Providers
                Used by <see cref="T:Pillar.FluentRuleEngine.RuleEngine`1">Rule Engine</see> to get names of objects and properties.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.NameProviders.INameProvider.GetName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the Name of the property of a subject.
            </summary>
            <typeparam name="TSubject">Type of subject of whose property getting the name for.</typeparam>
            <typeparam name="TProperty">
                Type of the property of the <paramref name="subject">subject</paramref>.
            </typeparam>
            <param name="subject">Object of whom the property is of.</param>
            <param name="propertyExpression">Property Expression of the property.</param>
            <returns>
                A <see cref="T:System.String">String</see> which is the property name.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.NameProviders.INameProvider.GetName(System.Object)">
            <summary>
                Gets the name of an Object.
            </summary>
            <param name="subject">Object to get name of.</param>
            <returns>
                A <see cref="T:System.String">String</see> which is the object name.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.NameProviders.INameProvider.GetName``1">
            <summary>
                Gets the name.
            </summary>
            <typeparam name="T">The type to get the name of.</typeparam>
            <returns>
                A <see cref="T:System.String">String</see> which is the types name.
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.NameProviders.TypePropertyNameNameProvider">
            <summary>
                Name Provider that returns the actual property name for properties and the Type name for objects.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.NameProviders.TypePropertyNameNameProvider.GetName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the Name of the property of a subject.
            </summary>
            <typeparam name="TSubject">Type of subject of whose property getting the name for.</typeparam>
            <typeparam name="TProperty">
                Type of the property of the <paramref name="subject">subject</paramref>.
            </typeparam>
            <param name="subject">Object of whom the property is of.</param>
            <param name="propertyExpression">Property Expression of the property.</param>
            <returns>
                A <see cref="T:System.String">String</see> which is the property name.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.NameProviders.TypePropertyNameNameProvider.GetName(System.Object)">
            <summary>
                Gets the name of an Object.
            </summary>
            <param name="subject">Object to get name of.</param>
            <returns>
                A <see cref="T:System.String">String</see> which is the object name.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.NameProviders.TypePropertyNameNameProvider.GetName``1">
            <summary>
                Gets the name.
            </summary>
            <typeparam name="T">The type to get the name of.</typeparam>
            <returns>
                A <see cref="T:System.String">String</see> which is the types name.
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.NamespaceDoc">
            <summary>
                The <see cref="N:Pillar.FluentRuleEngine"/> namespace contains RuleEngine interfaces, classes and functionality.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Constraints.NamespaceDoc">
            <summary>
                The <see cref="N:Pillar.FluentRuleEngine.Constraints"/> namespace contains RuleEngine constraint classes and functionality.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.NameProviders.NamespaceDoc">
            <summary>
                The <see cref="N:Pillar.FluentRuleEngine.NameProviders"/> namespace contains RuleEngine name providers classes and functionality.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Resources.NamespaceDoc">
            <summary>
                The <see cref="N:Pillar.FluentRuleEngine.Resources"/> namespace contains RuleEngine resources and resource extensions.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.NamespaceDoc">
            <summary>
                The <see cref="N:Pillar.FluentRuleEngine.Rules"/> namespace contains RuleEngine rules classes and functionality.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleSelectors.NamespaceDoc">
            <summary>
                The <see cref="N:Pillar.FluentRuleEngine.RuleSelectors"/> namespace contains RuleEngine rule selector classes and functionality.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.NotifyPropertyChangedRuleExecutor`2">
            <summary>
                Class that monitors a logical tree of a subject and runs the rules effected by a property change or collection modification.
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TRecurse">The type of object to recurse.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.NotifyPropertyChangedRuleExecutor`2.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.NotifyPropertyChangedRuleExecutor`2"/> class.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.NotifyPropertyChangedRuleExecutor`2.AddRunAllRulesProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Adds a property to run all rules when changed.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyExpression">The property expression.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.NotifyPropertyChangedRuleExecutor`2.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.NotifyPropertyChangedRuleExecutor`2.IgnoreProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Ignores the property.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyExpression">The property expression.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.NotifyPropertyChangedRuleExecutor`2.StopWatchingSubject(`0)">
            <summary>
                Stops Watching all objects in the logical tree of the subject.
            </summary>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.NotifyPropertyChangedRuleExecutor`2.WatchSubject(`0)">
            <summary>
                Watches all objects(that implement the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> or
                <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
                interfaces)
                in the logical tree of the subject.
            </summary>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.NotifyPropertyChangedRuleExecutor`2.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:Pillar.FluentRuleEngine.PropertyChain">
            <summary>
                Class used to describe the Property Chain of an objects property.
                A list of string members in the property chain.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.PropertyChain.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.PropertyChain"/> class.
            </summary>
            <param name="strings">List of member strings to initialize the propertyChain with.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.PropertyChain.FromLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
                Creates a property chain from a Lambda Expression.
            </summary>
            <param name="lambdaExpression">
                <see cref="T:System.Linq.Expressions.LambdaExpression">Lambda Expression</see> to create property chain from.
            </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.PropertyChain"/>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.PropertyChain.FromPropertyExpression``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Creates a <see cref="T:Pillar.FluentRuleEngine.PropertyChain"/> from the given property expression.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyExpression">The property expression.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.PropertyChain"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.PropertyChain.ToString">
            <summary>
                Joins property members using ".".
            </summary>
            <returns>Joined string.</returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Registry">
            <summary>
                This class defines dependency mapping for this Pillar assembly.
                These mappings will be registered when <see cref="T:Pillar.Common.InversionOfControl.IoC"/>.Bootstrap method is called.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Registry.Register">
            <summary>
                Registers dependencies using the <see cref="T:Pillar.Common.InversionOfControl.IoC"/>.Container.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Resources.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.Constraint_MaxLength_Message">
            <summary>
              Looks up a localized string similar to Then Length of {PropertyName} must be less then or equal to {CompareValue}..
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.Constraint_MinLength_Message">
            <summary>
              Looks up a localized string similar to Then Length of {PropertyName} must be Greater then or equal to {CompareValue}..
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.Constraint_Specification_Message">
            <summary>
              Looks up a localized string similar to {PropertyName} does not meet specification ({Specification})..
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.Constraints_Comparison_Message">
            <summary>
              Looks up a localized string similar to {PropertyName} must be {ComparisonOperator} {CompareValue}..
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.Constraints_ExclusiveBetween_Message">
            <summary>
              Looks up a localized string similar to {PropertyName} must be between but not equal to {StartValue} - {EndValue}.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.Constraints_InclusiveBetween_Message">
            <summary>
              Looks up a localized string similar to {PropertyName} must be between or equal to {StartValue} - {EndValue}.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.Constraints_InList_Message">
            <summary>
              Looks up a localized string similar to {PropertyName} must be in list: {ListString}..
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.Constraints_NotEmpty_Message">
            <summary>
              Looks up a localized string similar to {PropertyName} must not be empty..
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.Constraints_NotEmptyOrWhiteSpace_Message">
            <summary>
              Looks up a localized string similar to {PropertyName} must not be empty or white space..
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.Constraints_NotNull_Message">
            <summary>
              Looks up a localized string similar to {PropertyName} must not be empty..
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.Constraints_Null_Message">
            <summary>
              Looks up a localized string similar to {PropertyName} must be empty..
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.Constraints_Regex_Message">
            <summary>
              Looks up a localized string similar to {PropertyName} does not match regex ({RegexString})..
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.InvalidNumberOfConstraints">
            <summary>
              Looks up a localized string similar to A Property Rule must have at least one constraint..
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.MissingWhenClause">
            <summary>
              Looks up a localized string similar to When clause is missing..
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.NotNullFormat">
            <summary>
              Looks up a localized string similar to {0} is required..
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.ThenClauseMustPrecedeWhenClause">
            <summary>
              Looks up a localized string similar to The When Clause cannot be added until after the Then Clause is added..
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Resources.Messages.WhenClauseMustPrecedeThenClause">
            <summary>
              Looks up a localized string similar to The Then Clause cannot be added until after the When Clause is added..
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Resources.StringExtensions">
            <summary>
                String extensions to Handle formatting Rule Engine Messages.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Resources.StringExtensions.FormatCompareRuleEngineMessage(System.String,System.Object,System.String)">
            <summary>
                Formats a Compare Rule Engine Message Correctly replaces names variables in the string.
            </summary>
            <param name="formatString">String to format.</param>
            <param name="compareValue">Value of the comparison object to put in format string.</param>
            <param name="operatorString">Operator the comparison is using, to put in format string.</param>
            <returns>
                A formatted <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Resources.StringExtensions.FormatCompareRuleEngineMessage(System.String,System.String)">
            <summary>
                Formats a Compare Rule Engine Message Correctly replaces names variables in the string.
            </summary>
            <param name="formatString">String to format.</param>
            <param name="operatorString">Operator the comparison is using, to put in format string.</param>
            <returns>
                A formatted <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Resources.StringExtensions.FormatRuleEngineMessage(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Formats a Rule Error Message correctly replacing named variables in the string.
            </summary>
            <param name="formatString">String to format.</param>
            <param name="propertyRuleName">Name of property to put in the format string.</param>
            <param name="nameDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2">Dictionary</see> of key value pairs to replace in format string.
            </param>
            <returns>
                A formatted <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Resources.StringExtensions.FormatRuleEngineMessage(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Formats a Rule Error Message correctly replacing named variables in the string.
            </summary>
            <param name="formatString">String to format.</param>
            <param name="nameDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2">Dictionary</see> of key value pairs to replace in format string.
            </param>
            <returns>
                A formatted <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleCollectionFactory">
            <summary>
                Factory for creating a <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">Rule Collection</see>.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleCollectionFactory.CreateRuleCollection``1">
            <summary>
                Creates a <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">Rule Collection</see> of TSubject.
            </summary>
            <typeparam name="TSubject">Type of the subject of the Rule Collection.</typeparam>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">RuleCollection&lt;TSubject&gt;</see>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleCollectionFactory.CreateRuleCollection(System.Type)">
            <summary>
            Creates the rule collection.
            </summary>
            <param name="subjectType">Type of subject of the rule collection.</param>
            <returns>A rule collection.</returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleCollectionFactory.CustomizeRuleCollection``1(Pillar.FluentRuleEngine.IRuleCollection{``0},System.Boolean)">
            <summary>
                Customizes a <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">Rule Collection</see>.
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <param name="ruleCollection">The rule collection.</param>
            <param name="useBaseClass">
                Set to true if the rule collection base class contains the rule properties to customize.  This is
                useful in situations where the actual class is compiled at runtime such as Razor views.
            </param>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleEngine`1">
            <summary>
                Class used to manage the running of rules contained in <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">Rule Collections</see>.
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngine`1.#ctor(Pillar.FluentRuleEngine.IRuleCollection{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngine`1"/> class.
            </summary>
            <param name="ruleCollection">
                <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">Rule Collection</see> containing the list of rules that will be executed.
            </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngine`1.#ctor(Pillar.FluentRuleEngine.IRuleCollection{`0},Pillar.FluentRuleEngine.IRuleProcessor)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngine`1"/> class.
            </summary>
            <param name="ruleCollection">
                <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">Rule Collection</see> containing the list of rules that will be executed.
            </param>
            <param name="ruleProcessor">
                <see cref="T:Pillar.FluentRuleEngine.IRuleProcessor">Rule Processor</see> to use to process each rule when executed.
            </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngine`1.CreateTypedRuleEngine">
            <summary>
                Creates the typed rule engine.
            </summary>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngine`1.ExecuteAllRules(`0)">
            <summary>
                Executes all rules in the Rule Collection of the Rule Engine.
            </summary>
            <param name="subject">Subject the rules are run against.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.RuleExecutionResult"/> containing the results of the execution pass.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngine`1.ExecuteRuleSet(`0,System.String)">
            <summary>
                Executes rules that are part of a Rule Set in the Rule Collection of the Rule Engine.
            </summary>
            <param name="subject">Subject the rules are run against.</param>
            <param name="ruleSetName">The Rule Set name of the rules to execute..</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.RuleExecutionResult"/> containing the results of the execution pass.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngine`1.ExecuteRules(Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Executes Rules using specified <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/>
            </summary>
            <param name="ruleEngineContext">Context to use when executing rules.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.RuleExecutionResult"/> containing the results of the execution pass.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngine`1.ExecuteSelectedRules(`0,Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector)">
            <summary>
                Executes rules selected by the rule selector in the Rule Collection of the Rule Engine.
            </summary>
            <param name="subject">Subject the rules are run against.</param>
            <param name="ruleSelector">
                The <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector">Rule Selector</see> to determine the list of rules that will be executed.
            </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.RuleExecutionResult"/> containing the results of the execution pass.
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleEngineContext`1">
            <summary>
                Generic Context used when executing a Collection of Rules.
            </summary>
            <typeparam name="TSubject"> The type of the subject. </typeparam>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleEngineContext">
            <summary>
                Generic Context used when executing a Collection of Rules.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineContext.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext"/> class.
            </summary>
            <param name="subject"> Subject for the context. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineContext.#ctor(System.Object,Pillar.FluentRuleEngine.IRuleViolationReporter,Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector,Pillar.FluentRuleEngine.NameProviders.INameProvider,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext"/> class.
            </summary>
            <param name="subject"> Subject for the context. </param>
            <param name="ruleViolationReporter">
                <see cref="T:Pillar.FluentRuleEngine.IRuleViolationReporter">RuleViolationReporter</see> of the context.
            </param>
            <param name="ruleSelector">
                <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector">RuleSelector</see> of the context.
            </param>
            <param name="nameProvider">
                <see cref="T:Pillar.FluentRuleEngine.NameProviders.INameProvider">NameProvider</see> of the context.
            </param>
            <param name="parentContext"> Optional Parent RuleEngineContext. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineContext.CreateRuleEngineContext``1(``0,Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector)">
            <summary>
                Creates the rule engine context.
            </summary>
            <typeparam name="T"> Type of subject. </typeparam>
            <param name="subject"> The subject. </param>
            <param name="ruleSelector"> The rule selector. </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineContext.AddParentContext(Pillar.FluentRuleEngine.IRuleEngineContext)">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineContext.Refresh">
            <summary>
                Refreshes the context.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleEngineContext.NameProvider">
            <inheritdoc />
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleEngineContext.ParentContext">
            <inheritdoc />
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleEngineContext.RuleSelector">
            <inheritdoc />
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleEngineContext.RuleViolationReporter">
            <inheritdoc />
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleEngineContext.Subject">
            <inheritdoc />
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleEngineContext.WorkingMemory">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineContext`1.#ctor(`0,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1"/> class.
            </summary>
            <param name="subject"> Subject for the context. </param>
            <param name="parentContext"> Optional Parent RuleEngineContext. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineContext`1.#ctor(`0,Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1"/> class.
            </summary>
            <param name="subject"> Subject for the context. </param>
            <param name="ruleSelector">
                <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector">RuleSelector</see> of the context.
            </param>
            <param name="parentContext"> Optional Parent RuleEngineContext. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineContext`1.#ctor(`0,Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector,Pillar.FluentRuleEngine.NameProviders.INameProvider,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1"/> class.
            </summary>
            <param name="subject"> Subject for the context. </param>
            <param name="ruleSelector">
                <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector">RuleSelector</see> of the context.
            </param>
            <param name="nameProvider">
                <see cref="T:Pillar.FluentRuleEngine.NameProviders.INameProvider">NameProvider</see> of the context.
            </param>
            <param name="parentContext"> Optional Parent RuleEngineContext. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineContext`1.#ctor(`0,Pillar.FluentRuleEngine.IRuleViolationReporter,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1"/> class.
            </summary>
            <param name="subject"> Subject for the context. </param>
            <param name="ruleViolationReporter">
                <see cref="T:Pillar.FluentRuleEngine.IRuleViolationReporter">RuleViolationReporter</see> of the context.
            </param>
            <param name="parentContext"> Optional Parent RuleEngineContext. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineContext`1.#ctor(`0,Pillar.FluentRuleEngine.IRuleViolationReporter,Pillar.FluentRuleEngine.NameProviders.INameProvider,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1"/> class.
            </summary>
            <param name="subject"> Subject for the context. </param>
            <param name="ruleViolationReporter">
                <see cref="T:Pillar.FluentRuleEngine.IRuleViolationReporter">RuleViolationReporter</see> of the context.
            </param>
            <param name="nameProvider">
                <see cref="T:Pillar.FluentRuleEngine.NameProviders.INameProvider">NameProvider</see> of the context.
            </param>
            <param name="parentContext"> Optional Parent RuleEngineContext. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineContext`1.#ctor(`0,Pillar.FluentRuleEngine.NameProviders.INameProvider,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1"/> class.
            </summary>
            <param name="subject"> Subject for the context. </param>
            <param name="nameProvider">
                <see cref="T:Pillar.FluentRuleEngine.NameProviders.INameProvider">NameProvider</see> of the context.
            </param>
            <param name="parentContext"> Optional Parent RuleEngineContext. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineContext`1.#ctor(`0,Pillar.FluentRuleEngine.IRuleViolationReporter,Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1"/> class.
            </summary>
            <param name="subject"> Subject for the context. </param>
            <param name="ruleViolationReporter">
                <see cref="T:Pillar.FluentRuleEngine.IRuleViolationReporter">RuleViolationReporter</see> of the context.
            </param>
            <param name="ruleSelector">
                <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector">RuleSelector</see> of the context.
            </param>
            <param name="parentContext"> Optional Parent RuleEngineContext. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineContext`1.#ctor(`0,Pillar.FluentRuleEngine.IRuleViolationReporter,Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector,Pillar.FluentRuleEngine.NameProviders.INameProvider,Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1"/> class.
            </summary>
            <param name="subject"> Subject for the context. </param>
            <param name="ruleViolationReporter">
                <see cref="T:Pillar.FluentRuleEngine.IRuleViolationReporter">RuleViolationReporter</see> of the context.
            </param>
            <param name="ruleSelector">
                <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector">RuleSelector</see> of the context.
            </param>
            <param name="nameProvider">
                <see cref="T:Pillar.FluentRuleEngine.NameProviders.INameProvider">NameProvider</see> of the context.
            </param>
            <param name="parentContext"> Optional Parent RuleEngineContext. </param>
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleEngineContext`1.Subject">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleEngineFactory">
            <summary>
                Factory that creates a <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1"/>
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineFactory.#ctor(Pillar.FluentRuleEngine.IRuleCollectionFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineFactory"/> class.
            </summary>
            <param name="ruleCollectionFactory">The rule collection factory.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineFactory.CreateRuleEngine``1">
            <summary>
                Creates the <see cref="T:Pillar.FluentRuleEngine.RuleEngine`1">Rule Engine</see> using the <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">Rule Collection</see> passed into the constructor.
            </summary>
            <typeparam name="TSubject">The Type of the subject for the rules.</typeparam>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">Rule Engine</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineFactory.CreateRuleEngine``1(``0)">
            <summary>
                Creates the <see cref="T:Pillar.FluentRuleEngine.RuleEngine`1">Rule Engine</see> using the <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">Rule Collection</see> passed into the constructor.
            </summary>
            <typeparam name="TSubject">The Type of the subject for the rules.</typeparam>
            <param name="subject">The subject.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">Rule Engine</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineFactory.CreateRuleEngine``1(``0,Pillar.FluentRuleEngine.IRuleCollection{``0})">
            <summary>
                Creates the <see cref="T:Pillar.FluentRuleEngine.RuleEngine`1">Rule Engine</see> using the given TSubject and
                <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">
                    Rule Collection
                </see>
                .
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <param name="subject">The subject.</param>
            <param name="ruleCollection">The rule collection.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">Rule Engine</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineFactory.CreateRuleEngine``1(``0,Pillar.FluentRuleEngine.IRuleCollection{``0},Pillar.FluentRuleEngine.IRuleProcessor)">
            <summary>
                Creates the <see cref="T:Pillar.FluentRuleEngine.RuleEngine`1">Rule Engine</see> using the given TSubject,
                <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">
                    Rule Collection
                </see>
                ,
                and <see cref="T:Pillar.FluentRuleEngine.IRuleProcessor">Rule Processor</see>.
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <param name="subject">The subject.</param>
            <param name="ruleCollection">The rule collection.</param>
            <param name="ruleProcessor">The rule processor.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">Rule Engine</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineFactory.CreateRuleEngine``1(Pillar.FluentRuleEngine.IRuleCollection{``0})">
            <summary>
                Creates the <see cref="T:Pillar.FluentRuleEngine.RuleEngine`1">Rule Engine</see> using the given
                <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">
                    Rule Collection
                </see>
                .
            </summary>
            <typeparam name="TSubject"> The type of the subject. </typeparam>
            <param name="ruleCollection"> The rule collection. </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">Rule Engine</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineFactory.CreateRuleEngine``1(Pillar.FluentRuleEngine.IRuleCollection{``0},Pillar.FluentRuleEngine.IRuleProcessor)">
            <summary>
                Creates the <see cref="T:Pillar.FluentRuleEngine.RuleEngine`1">Rule Engine</see> using the given
                <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">
                    Rule Collection
                </see>
                and <see cref="T:Pillar.FluentRuleEngine.IRuleProcessor">Rule Processor</see>.
            </summary>
            <typeparam name="TSubject"> The type of the subject. </typeparam>
            <param name="ruleCollection"> The rule collection. </param>
            <param name="ruleProcessor"> The rule processor. </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">Rule Engine</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleEngineFactory.CreateRuleEngine(System.Type)">
            <summary>
            Creates the rule engine.
            </summary>
            <param name="subjectType">Type of the subject.</param>
            <returns>
            A <see cref="T:Pillar.FluentRuleEngine.IRuleEngine"/>.
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleExecutionResult">
            <summary>
                Results of a Rule Engine Execution.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleExecutionResult.#ctor(System.Collections.Generic.IEnumerable{Pillar.FluentRuleEngine.RuleViolation})">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleExecutionResult"/> class.
            </summary>
            <param name="ruleViolations">
                List of <see cref="T:Pillar.FluentRuleEngine.RuleViolation">rule violations</see> that occurred to rule engine execution.
            </param>
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleExecutionResult.HasRuleViolation">
            <summary>
                Gets a value indicating whether this instance has rule violation.
            </summary>
            <value>
                <c>True</c> if this instance has rule violation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleExecutionResult.RuleViolations">
            <summary>
                Gets the list of <see cref="T:Pillar.FluentRuleEngine.RuleViolation">rule violations</see>.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleExtensions">
            <summary>
                Extension methods for Pillar.FluentRuleEngine.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleExtensions.Constrain``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``1,``0,``2},System.Predicate{``2},System.String)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> to a rule.
            </summary>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="predicate">
                <see cref="T:System.Predicate`1"/> to use in the inline constraint.
            </param>
            <param name="message">Rule Violation Message for Constraint.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleExtensions.ConstrainWithCollection``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``1,``0,``2},Pillar.FluentRuleEngine.IRuleCollection{``2},Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector)">
            <summary>
                Adds an <see cref="T:Pillar.FluentRuleEngine.Constraints.InlineConstraint`1"/> to a rule.
            </summary>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="ruleCollection">Rule Collection for property.</param>
            <param name="ruleSelector">
                Optional Rule Selector for <paramref name="ruleCollection"/>
            </param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleExtensions.ContextObjectConstrain``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``1,``0,``2},System.Func{``2,``2,System.Boolean},System.String)">
            <summary>
                Adds a <see cref="T:Pillar.FluentRuleEngine.Constraints.ContextObjectInlineConstraint`1"/> to a rule.
            </summary>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="func">
                <see cref="T:System.Func`3"/> to use in the context object inline constraint.
            </param>
            <param name="contextObjectName">Optional Name of the ContextObject.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleExtensions.Disable(Pillar.FluentRuleEngine.IRule)">
            <summary>
                Disables a <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see>.
            </summary>
            <param name="rule">Rule to disable.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleExtensions.ReportRuleViolation``1(Pillar.FluentRuleEngine.RuleEngineContext{``0},Pillar.FluentRuleEngine.IRule,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
                Reports the rule violation with the specified rule violation message.
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <param name="ruleEngineContext">The rule engine context.</param>
            <param name="rule">The rule.</param>
            <param name="message">
                Message to use in the <see cref="T:Pillar.FluentRuleEngine.RuleViolation"/>.
            </param>
            <param name="nameDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2"/> to use when formatting the <paramref name="message"/>.
            </param>
            <param name="propertyNames">Params of property names that caused the rule violation.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleExtensions.ReportRuleViolation``1(Pillar.FluentRuleEngine.RuleEngineContext{``0},Pillar.FluentRuleEngine.IRule,System.Func{``0,Pillar.FluentRuleEngine.RuleEngineContext{``0},System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
                Reports the rule violation with the message given by the message function.
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <param name="ruleEngineContext">The rule engine context.</param>
            <param name="rule">The rule.</param>
            <param name="getMessageFunc">
                <see cref="T:System.Func`3"/> to get the Message to use in <see cref="T:Pillar.FluentRuleEngine.RuleViolation"/>.
            </param>
            <param name="nameDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2"/> to use when formatting the message.
            </param>
            <param name="propertyNames">Params of property names that caused the rule violation.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleExtensions.ReportRuleViolation``1(Pillar.FluentRuleEngine.RuleEngineContext{``0},Pillar.FluentRuleEngine.IRule,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
                Reports the rule violation with the message that is provided by the built-in <see cref="T:Pillar.FluentRuleEngine.IErrorMessageProvider"/>.
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <param name="ruleEngineContext">The rule engine context.</param>
            <param name="rule">The rule.</param>
            <param name="objectInstance">The object instance that owns the violation message.</param>
            <param name="nameDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2"/> to use when formatting the message.
            </param>
            <param name="propertyNames">Params of property names that caused the rule violation.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleExtensions.RunForProperty``3(Pillar.FluentRuleEngine.Rules.IRuleBuilderInitializer{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
                Adds an attribute to the rule with the key "PropertyChain".
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="propertyExpression">The property expression.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilderInitializer`2"/>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleExtensions.ShouldRunWhenNoViolations``1(Pillar.FluentRuleEngine.AbstractRuleCollection{``0},System.Action)">
            <summary>
                Adds rules that will only run if there are no rule violations.
            </summary>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <param name="abstractRuleCollection">The abstract rule collection.</param>
            <param name="action">The action that adds the rules.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleExtensions.ThenReportRuleViolation``2(Pillar.FluentRuleEngine.Rules.IRuleBuilder{``0,``1},System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
                Adds a Then Clause to a Rule that Reports a <see cref="T:Pillar.FluentRuleEngine.RuleViolation"/> using the specified
                error message.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2"/> currently configuring the rule.
            </param>
            <param name="message">
                Message to use in the <see cref="T:Pillar.FluentRuleEngine.RuleViolation"/>
            </param>
            <param name="nameDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2"/> to use when formatting the <paramref name="message"/>.
            </param>
            <param name="propertyNames">Params of property names that caused the rule violation.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2"/>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleExtensions.ThenReportRuleViolation``2(Pillar.FluentRuleEngine.Rules.IRuleBuilder{``0,``1},System.Func{``1,Pillar.FluentRuleEngine.RuleEngineContext{``1},System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
                Adds a Then Clause to a Rule that Reports a <see cref="T:Pillar.FluentRuleEngine.RuleViolation"/> using the specified
                error message.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <param name="ruleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2"/> currently configuring the rule.
            </param>
            <param name="getMessageFunc">
                <see cref="T:System.Func`3"/> to get the Message to use in <see cref="T:Pillar.FluentRuleEngine.RuleViolation"/>.
            </param>
            <param name="nameDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2"/> to use when formatting the message.
            </param>
            <param name="propertyNames">Params of propertyNames that caused the rule violation.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2"/>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleExtensions.ThenReportRuleViolation``2(Pillar.FluentRuleEngine.Rules.IRuleBuilder{``0,``1},System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
                Adds a Then Clause to a Rule that Reports a <see cref="T:Pillar.FluentRuleEngine.RuleViolation"/> using an error
                message that is provided by the built-in <see cref="T:Pillar.FluentRuleEngine.IErrorMessageProvider"/>.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <param name="ruleBuilder">The rule builder.</param>
            <param name="objectInstance">The object instance.</param>
            <param name="nameDictionary">The name dictionary.</param>
            <param name="propertyNames">The property names.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2"/>.
            </returns>
            <remarks>
                The built-in <see cref="T:Pillar.FluentRuleEngine.IErrorMessageProvider"/>, by default, is an implementation that finds
                error messages by looking for a resource manager for the type of the given <paramref name="objectInstance"/>.
                The resource name is defined by the name of the rule.
            </remarks>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleExtensions.ThenReportRuleViolation``3(Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder{``1,``0,``2},System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
                Adds a Then clause to a Rule the Reports a <see cref="T:Pillar.FluentRuleEngine.RuleViolation"/>.
            </summary>
            <typeparam name="TSubject">Type of subject of the rule.</typeparam>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> of the rule.
            </typeparam>
            <typeparam name="TProperty">Type of property of the subject of the rule.</typeparam>
            <param name="propertyRuleBuilder">
                <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/> currently configuring the rule.
            </param>
            <param name="message">
                Message to use in <see cref="T:Pillar.FluentRuleEngine.RuleViolation"/>
            </param>
            <param name="nameDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2"/> to use when formatting the <paramref name="message"/>
            </param>
            <param name="propertyNames">Params of propertyNames that caused the rule violation.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>.
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleProcessor">
            <summary>
                Processor that manages executing a singe rule.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleProcessor.Process(Pillar.FluentRuleEngine.IRuleEngineContext,Pillar.FluentRuleEngine.IRule)">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleSelectors.IMemberNameRuleSelector">
            <summary>
                Interface for a rule selector that uses a member name to select rules.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleSelectors.IMemberNameRuleSelector.MemberName">
            <summary>
                Gets the name of the member.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector">
            <summary>
                Interface for a Rule Selector.
                Used by <see cref="T:Pillar.FluentRuleEngine.IRuleEngine`1">rule engine</see> to get list of rules to run.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector.SelectRules``1(Pillar.FluentRuleEngine.IRuleCollection{``0},Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Gets the list of <see cref="T:Pillar.FluentRuleEngine.IRule">Rules</see> to run.
            </summary>
            <typeparam name="TSubject">
                Type of subject for <paramref name="ruleCollection">rule collection</paramref>
            </typeparam>
            <param name="ruleCollection">The rule collection.</param>
            <param name="context">The context.</param>
            <returns>List of rules to run.</returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleSelectors.ITakeParameter">
            <summary>
                Interface for class that takes a parameter.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleSelectors.ITakeParameter.Parameter">
            <summary>
                Gets or sets the parameter.
            </summary>
            <value>
                The parameter.
            </value>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleSelectors.PropertyChainContainsMemberRuleSelector`1">
            <summary>
                <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector">Rule Selector</see> that selects all property rules whose property chain contains a member name.
            </summary>
            <typeparam name="TParameter">The type of the parameter.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSelectors.PropertyChainContainsMemberRuleSelector`1.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.PropertyChainContainsMemberRuleSelector`1"/> class.
            </summary>
            <param name="memberName">Name of the member.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSelectors.PropertyChainContainsMemberRuleSelector`1.#ctor(System.Func{`0,System.String})">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.PropertyChainContainsMemberRuleSelector`1"/> class.
            </summary>
            <param name="memberNameFunc">The member name func.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSelectors.PropertyChainContainsMemberRuleSelector`1.SelectRules``1(Pillar.FluentRuleEngine.IRuleCollection{``0},Pillar.FluentRuleEngine.IRuleEngineContext)">
            <inheritdoc />
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleSelectors.PropertyChainContainsMemberRuleSelector`1.MemberName">
            <summary>
                Gets the name of the member.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleSelectors.PropertyChainContainsMemberRuleSelector`1.Parameter">
            <summary>
                Gets or sets the parameter.
            </summary>
            <value>
                The parameter.
            </value>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleSelectors.SelectAllRuleSelector">
            <summary>
                Rule Selector that selects all rules.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSelectors.SelectAllRuleSelector.SelectRules``1(Pillar.FluentRuleEngine.IRuleCollection{``0},Pillar.FluentRuleEngine.IRuleEngineContext)">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleSelectors.SelectAllRulesInRuleSetSelector">
            <summary>
                Rule Selector that selects rules within a Rule Set.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSelectors.SelectAllRulesInRuleSetSelector.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.SelectAllRulesInRuleSetSelector"/> class.
            </summary>
            <param name="ruleSetName">
                Name of <see cref="T:Pillar.FluentRuleEngine.IRuleSet">Rule Set</see> to select.
            </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSelectors.SelectAllRulesInRuleSetSelector.#ctor(Pillar.FluentRuleEngine.IRuleSet)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.SelectAllRulesInRuleSetSelector"/> class.
            </summary>
            <param name="ruleSet">
                <see cref="T:Pillar.FluentRuleEngine.IRuleSet">Rule Set</see> to select.
            </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSelectors.SelectAllRulesInRuleSetSelector.SelectRules``1(Pillar.FluentRuleEngine.IRuleCollection{``0},Pillar.FluentRuleEngine.IRuleEngineContext)">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleSelectors.SelectSingleRuleSelector">
            <summary>
                Rule Selector that selects a single rule.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSelectors.SelectSingleRuleSelector.#ctor(Pillar.FluentRuleEngine.IRule)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.SelectSingleRuleSelector"/> class.
            </summary>
            <param name="rule">The rule.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSelectors.SelectSingleRuleSelector.SelectRules``1(Pillar.FluentRuleEngine.IRuleCollection{``0},Pillar.FluentRuleEngine.IRuleEngineContext)">
            <summary>
                Gets the list of <see cref="T:Pillar.FluentRuleEngine.IRule">Rules</see> to run.
            </summary>
            <typeparam name="TSubject">
                Type of subject for <paramref name="ruleCollection">rule collection</paramref>
            </typeparam>
            <param name="ruleCollection"> The rule collection. </param>
            <param name="context"> The context. </param>
            <returns> List of rules to run. </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleSet">
            <summary>
                A collection of <see cref="T:Pillar.FluentRuleEngine.IRule">Rules</see>.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSet.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleSet"/> class.
            </summary>
            <param name="name"> Name of Rule Set. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSet.#ctor(System.String,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleSet"/> class.
            </summary>
            <param name="name"> Name of Rule Set. </param>
            <param name="capacity"> Initial capacity of the Rule Set. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSet.#ctor(System.String,System.Collections.Generic.IEnumerable{Pillar.FluentRuleEngine.IRule})">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleSet"/> class.
            </summary>
            <param name="name"> Name of the Rule Set. </param>
            <param name="collection"> Initial rules to add to the Rule Set. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSet.Add(Pillar.FluentRuleEngine.IRule)">
            <summary>
                Adds a <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see> to the rule set.
            </summary>
            <param name="rule"> Rule to add to Rule Set. </param>
            <exception cref="T:System.ArgumentException">Rule is required.</exception>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSet.AddRule(Pillar.FluentRuleEngine.IRule)">
            <summary>
                Adds the rule.
            </summary>
            <param name="rule"> The rule. </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleSet.RemoveRule(Pillar.FluentRuleEngine.IRule)">
            <summary>
                Removes the rule.
            </summary>
            <param name="rule"> The rule. </param>
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleSet.Name">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.AttributeCollection">
            <summary>
                Collection of attributes.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.AttributeCollection.Item(System.String)">
            <summary>
                Gets or sets the element at the specified index.
            </summary>
            <param name="key">Key to find.</param>
            <returns>
                The element at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="key" /> is less than 0.
                -or-
                <paramref name="key" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.
            </exception>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.CollectionPropertyRule">
            <summary>
                A collection property rule that manages creating/executing a sub Rule Collection on an IEnumerable property of a Subject.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.PropertyRuleBase">
            <summary>
                Base class used to hold base property rule properties.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.Rule">
            <summary>
                Defines a When <see cref="T:System.Predicate`1"/> for an <see cref="T:Pillar.FluentRuleEngine.IRuleEngineContext"/> and Lists of
                Then and ElseThen <see cref="T:System.Action`1">Actions</see>.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.Rule.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Rules.Rule"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.Rule.AddAttribute(System.String,System.Object)">
            <summary>
                Adds the attribute.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.Rule.RemoveAllAttributesWithKey(System.String)">
            <summary>
                Removes all attributes with key.
            </summary>
            <param name="key">The key to remove.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.Rule.RemoveAttribute(System.String,System.Object)">
            <summary>
                Removes the attribute.
            </summary>
            <param name="key">The key to remove.</param>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.Rule.ShouldRunRule(Pillar.FluentRuleEngine.IRuleEngineContext)">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.Rule.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.Rule.AddElseThenClause(System.Action{Pillar.FluentRuleEngine.IRuleEngineContext})">
            <summary>
                Adds ElseThenClause to Rule.
            </summary>
            <param name="elseThenClause">
                <see cref="T:System.Action`1"/> to add as ElseThenClause.
            </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.Rule.AddShouldRunClause(System.Predicate{Pillar.FluentRuleEngine.IRuleEngineContext})">
            <summary>
                Adds ShouldRunClause to Rule.
            </summary>
            <param name="shouldRunClause">
                <see cref="T:System.Predicate`1"/> to add as ShouldRunClause.
            </param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.Rule.AddThenClause(System.Action{Pillar.FluentRuleEngine.IRuleEngineContext})">
            <summary>
                Adds ThenClause to Rule.
            </summary>
            <param name="thenClause">
                <see cref="T:System.Action`1"/> to add as ThenClause.
            </param>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.Rule.Attributes">
            <inheritdoc />
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.Rule.ElseThenClauses">
            <inheritdoc />
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.Rule.IsDisabled">
            <inheritdoc />
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.Rule.Name">
            <inheritdoc />
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.Rule.Priority">
            <inheritdoc />
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.Rule.ThenClauses">
            <inheritdoc />
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.Rule.WhenClause">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.PropertyRuleBase.#ctor(System.Linq.Expressions.LambdaExpression,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Rules.PropertyRuleBase"/> class.
            </summary>
            <param name="propertyExpression">Property Expression for property.</param>
            <param name="name">Name of Rule.</param>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.PropertyRuleBase.PropertyChain">
            <summary>
                Gets the property chain.
            </summary>
            <value>
                The property chain.
            </value>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.PropertyRuleBase.PropertyExpression">
            <summary>
                Gets the property expression.
            </summary>
            <value>
                The property expression.
            </value>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.PropertyRuleBase.PropertyValueDelegate">
            <summary>
                Gets or sets the property value delegate.
            </summary>
            <value>
                The property value delegate.
            </value>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.CollectionPropertyRule.WithRuleCollection``1(Pillar.FluentRuleEngine.IRuleCollection{``0},Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector)">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.CollectionPropertyRuleBuilder`3">
            <summary>
                A Builder for a <see cref="T:Pillar.FluentRuleEngine.ICollectionPropertyRule">Collection Property Rule</see>.
            </summary>
            <typeparam name="TContext">
                The type of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1">RuleEngineContext</see> for the rule.
            </typeparam>
            <typeparam name="TSubject">The type of the subject for the rule.</typeparam>
            <typeparam name="TProperty">
                The type of the property of the <typeparamref name="TSubject">TSubject</typeparamref> for the rule.
            </typeparam>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.RuleBuilder`2">
            <summary>
                Builder that configures a <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see>.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TSubject">The type of the subject.</typeparam>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2">
            <summary>
                Interface for a class that builds up a <see cref="T:Pillar.FluentRuleEngine.IRule">Rule.</see>
            </summary>
            <typeparam name="TContext">Type of the context for the rule.</typeparam>
            <typeparam name="TSubject">Type of the subject for the rule.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2.DoNotRunIfHasRuleViolation">
            <summary>
                Configures the Rule to not be run if a <see cref="T:Pillar.FluentRuleEngine.RuleViolation">Rule Violation</see> has occurred.
            </summary>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2">IRuleBuilder&lt;TContext,TSubject&gt;</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2.ElseThen(System.Action{`1})">
            <summary>
                Adds an else then <see cref="T:System.Action`1">Action&lt;TSubject&gt;</see> to the <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see>.
            </summary>
            <param name="elseThenClause">
                <see cref="T:System.Action`1">Action&lt;TSubject&gt;</see> to add to <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see>.
            </param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2">IRuleBuilder&lt;TContext,TSubject&gt;</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2.ElseThen(System.Action{`1,`0})">
            <summary>
                Adds an else then <see cref="T:System.Action`2">Action&lt;TSubject,TContext&gt;</see> to the
                <see cref="T:Pillar.FluentRuleEngine.IRule">
                    Rule
                </see>
                .
            </summary>
            <param name="elseThenClause">
                <see cref="T:System.Action`2">Action&lt;TSubject,TContext&gt;</see> to add to <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see>.
            </param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2">IRuleBuilder&lt;TContext,TSubject&gt;</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2.Then(System.Action{`1})">
            <summary>
                Adds a then <see cref="T:System.Action`1">Action&lt;TSubject&gt;</see> to the <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see>.
            </summary>
            <param name="thenClause">
                <see cref="T:System.Action`1">Action&lt;TSubject&gt;</see> to add to <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see>.
            </param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2">IRuleBuilder&lt;TContext,TSubject&gt;</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2.Then(System.Action{`1,`0})">
            <summary>
                Adds a then <see cref="T:System.Action`2">Action&lt;TSubject,TContext&gt;</see> to the <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see>.
            </summary>
            <param name="thenClause">
                <see cref="T:System.Action`2">Action&lt;TSubject,TContext&gt;</see> to add to <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see>.
            </param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2">IRuleBuilder&lt;TContext,TSubject&gt;</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2.WithPriority(System.Int32)">
            <summary>
                Configures the priority of the Rule.
            </summary>
            <param name="priority">
                The <see cref="T:System.Int32">int</see> priority of the rule.
            </param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2">IRuleBuilder&lt;TContext,TSubject&gt;</see>.
            </returns>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2.Rule">
            <summary>
                Gets the <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see> the builder is building.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.IRuleBuilderInitializer`2">
            <summary>
                Interface for the builder that initializes a <see cref="T:Pillar.FluentRuleEngine.IRule">rule</see>.
            </summary>
            <typeparam name="TContext">Type of the context for the rule.</typeparam>
            <typeparam name="TSubject">Type of subject for the rule.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IRuleBuilderInitializer`2.AddAttribute(System.String,System.Object)">
            <summary>
                Adds the attribute.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add.</param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilderInitializer`2"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IRuleBuilderInitializer`2.OnContextObject``1(System.String)">
            <summary>
                Called when [context object].
            </summary>
            <typeparam name="TContextObject">The type of the context object.</typeparam>
            <param name="contextObjectName">Name of the context object.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IRuleBuilderInitializer`2.When(System.Predicate{`1})">
            <summary>
                Adds a when clause to the rule that only takes the subject as a parameter.
            </summary>
            <param name="whenClause">
                <see cref="T:System.Predicate`1">Predicate</see> that takes the subject as a parameter.
            </param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2">IRuleBuilder</see>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IRuleBuilderInitializer`2.When(System.Func{`1,`0,System.Boolean})">
            <summary>
                Adds a when clause to the rule that takes both the subject and the context as parameters.
            </summary>
            <param name="whenClause">
                <see cref="T:System.Func`3">Func</see> that takes the subject as a parameter.
            </param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2">IRuleBuilder</see>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.RuleBuilder`2.AddAttribute(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.RuleBuilder`2.DoNotRunIfHasRuleViolation">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.RuleBuilder`2.ElseThen(System.Action{`1})">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.RuleBuilder`2.ElseThen(System.Action{`1,`0})">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.RuleBuilder`2.OnContextObject``1(System.String)">
            <summary>
                Creates a rule builder that also provides a context object.
            </summary>
            <typeparam name="TContextObject">The type of the context object.</typeparam>
            <param name="contextObjectName">Name of the context object.</param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.RuleBuilder`2.Then(System.Action{`1})">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.RuleBuilder`2.Then(System.Action{`1,`0})">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.RuleBuilder`2.When(System.Predicate{`1})">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.RuleBuilder`2.When(System.Func{`1,`0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.RuleBuilder`2.WithPriority(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.RuleBuilder`2.Rule">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.ICollectionPropertyRuleBuilder`3">
            <summary>
                Interface for the Builder of a <see cref="T:Pillar.FluentRuleEngine.ICollectionPropertyRule">Collection Property Rule</see>.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.ICollectionPropertyRuleBuilder`3.WithRuleCollection(Pillar.FluentRuleEngine.IRuleCollection{`2},Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector)">
            <summary>
                Sets the <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">Rule Collection</see> that will be used to run rules for each item of the collection.
            </summary>
            <param name="ruleCollection">
                An <see cref="T:Pillar.FluentRuleEngine.IRuleCollection`1">IRuleCollection</see>
            </param>
            <param name="ruleSelector">
                Optional <see cref="T:Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector">Rule selector</see> for the <paramref name="ruleCollection">ruleCollection</paramref>.
            </param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.ICollectionPropertyRuleBuilder`3">ICollectionPropertyRuleBuilder</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.CollectionPropertyRuleBuilder`3.WithRuleCollection(Pillar.FluentRuleEngine.IRuleCollection{`2},Pillar.FluentRuleEngine.RuleSelectors.IRuleSelector)">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.CollectionPropertyRuleBuilderInitializer`2">
            <summary>
                Builder Initializer for a <see cref="T:Pillar.FluentRuleEngine.ICollectionPropertyRule">Collection Property Rule</see>Collection property.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TSubject">The type of the subject.</typeparam>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.ICollectionPropertyRuleBuilderInitializer`2">
            <summary>
                Interface for the builder initializer of a <see cref="T:Pillar.FluentRuleEngine.ICollectionPropertyRule">Collection Property Rule</see>.
            </summary>
            <typeparam name="TContext">
                Type of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1">context</see> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of the subject of the rule.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.ICollectionPropertyRuleBuilderInitializer`2.WithProperty``1(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
                Sets the property expression for the rule.
            </summary>
            <typeparam name="TProperty">
                Type of the property of the <typeparamref name="TSubject">subject</typeparamref>.
            </typeparam>
            <param name="propertyExpression">Property Expression to the property.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.ICollectionPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.CollectionPropertyRuleBuilderInitializer`2.WithProperty``1(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``0}}})">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.ContextObjectProviderRuleBuilder`3">
            <summary>
                RuleBuilder that can provide a context object.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TContextObject">The type of the context object.</typeparam>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3">
            <summary>
                A rule builder that also provides a context object.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <typeparam name="TSubject">The type of the subject.</typeparam>
            <typeparam name="TContextObject">The type of the context object.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3.Constrain(Pillar.FluentRuleEngine.Constraints.IConstraint)">
            <summary>
                Adds Constraint to Builder.
            </summary>
            <param name="constraint">The constraint.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3.GetContextObject(Pillar.FluentRuleEngine.WorkingMemory)">
            <summary>
                Gets the context object.
            </summary>
            <param name="workingMemory">The workingMemory to get the context object from.</param>
            <returns>A context object.</returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3.WithProperty(System.Linq.Expressions.Expression{System.Func{`2,System.Object}})">
            <summary>
                Withes the property.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3.Constraints">
            <summary>
                Gets the constraints.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3.ContextObjectName">
            <summary>
                Gets the name of the context object.
            </summary>
            <value>
                The name of the context object.
            </value>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3.ContextObjectType">
            <summary>
                Gets the type of the context object.
            </summary>
            <value>
                The type of the context object.
            </value>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.ContextObjectProviderRuleBuilder`3.#ctor(Pillar.FluentRuleEngine.Rules.Rule,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Rules.ContextObjectProviderRuleBuilder`3"/> class.
            </summary>
            <param name="rule">The rule.</param>
            <param name="contextObjectName">Name of the context object.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.ContextObjectProviderRuleBuilder`3.#ctor(Pillar.FluentRuleEngine.Rules.Rule,System.Linq.Expressions.Expression{System.Func{`2,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Rules.ContextObjectProviderRuleBuilder`3"/> class.
            </summary>
            <param name="rule">The rule.</param>
            <param name="contextManipulator">The context manipulator.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.ContextObjectProviderRuleBuilder`3.#ctor(Pillar.FluentRuleEngine.Rules.Rule,System.String,System.Linq.Expressions.Expression{System.Func{`2,System.Object}})">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Rules.ContextObjectProviderRuleBuilder`3"/> class.
            </summary>
            <param name="rule">The rule to build.</param>
            <param name="contextObjectName">Name of the context object.</param>
            <param name="contextPropertyExpression">The context manipulator.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.ContextObjectProviderRuleBuilder`3.Constrain(Pillar.FluentRuleEngine.Constraints.IConstraint)">
            <summary>
                Constrains the specified constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.ContextObjectProviderRuleBuilder`3.GetContextObject(Pillar.FluentRuleEngine.WorkingMemory)">
            <summary>
                Gets the context object.
            </summary>
            <param name="workingMemory">The workingMemory to get the context object from.</param>
            <returns>
                A context object.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.ContextObjectProviderRuleBuilder`3.WithProperty(System.Linq.Expressions.Expression{System.Func{`2,System.Object}})">
            <summary>
                Withes the property.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.IContextObjectProviderRuleBuilder`3"/>
            </returns>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.ContextObjectProviderRuleBuilder`3.Constraints">
            <summary>
                Gets the constraints.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.ContextObjectProviderRuleBuilder`3.ContextObjectName">
            <summary>
                Gets the name of the context object.
            </summary>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.ContextObjectProviderRuleBuilder`3.ContextObjectType">
            <summary>
                Gets the type of the context object.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3">
            <summary>
                Interface for the builder of a <see cref="T:Pillar.FluentRuleEngine.IPropertyRule">property rule</see>.
            </summary>
            <typeparam name="TContext">
                Type of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1">context</see> of the rule.
            </typeparam>
            <typeparam name="TSubject">Type of the subject of the rule.</typeparam>
            <typeparam name="TProperty">
                Type of the property of the <typeparamref name="TSubject">subject</typeparamref>.
            </typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3.AutoValidate">
            <summary>
                Updates Auto Validation of rule.
            </summary>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3">IPropertyRuleBuilder&lt;TContext,TSubject,TProperty&gt;</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3.Constrain(Pillar.FluentRuleEngine.Constraints.IConstraint)">
            <summary>
                Adds a Constraint to the rule.
            </summary>
            <param name="constraint">
                <see cref="T:Pillar.FluentRuleEngine.Constraints.IConstraint">Constraint</see> to add to rule.
            </param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3.DoNotAutoValidate">
            <summary>
                Updates Auto Validation of rule.
            </summary>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3">IPropertyRuleBuilder&lt;TContext,TSubject,TProperty&gt;</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3.DoNotRunIfHasRuleViolation">
            <summary>
                Configures the Rule to not be run if a <see cref="T:Pillar.FluentRuleEngine.RuleViolation">Rule Violation</see> has occurred.
            </summary>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3">IPropertyRuleBuilder&lt;TContext,TSubject,TProperty&gt;</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3.ElseThen(System.Action{`1})">
            <summary>
                Adds an else then <see cref="T:System.Action`1">Action&lt;TSubject&gt;</see> to the <see cref="T:Pillar.FluentRuleEngine.IPropertyRule">Rule</see>.
            </summary>
            <param name="elseThenClause">
                <see cref="T:System.Action`1">Action&lt;TSubject&gt;</see> to add to <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see>.
            </param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3">IPropertyRuleBuilder&lt;TContext,TSubject,TProperty&gt;</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3.ElseThen(System.Action{`1,`0})">
            <summary>
                Adds an else then <see cref="T:System.Action`2">Action&lt;TSubject,TContext&gt;</see> to the
                <see cref="T:Pillar.FluentRuleEngine.IRule">
                    Rule
                </see>
                .
            </summary>
            <param name="elseThenClause">
                <see cref="T:System.Action`2">Action&lt;TSubject,TContext&gt;</see> to add to <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see>.
            </param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3">IPropertyRuleBuilder&lt;TContext,TSubject,TProperty&gt;</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3.Then(System.Action{`1})">
            <summary>
                Adds a then <see cref="T:System.Action`1">Action&lt;TSubject&gt;</see> to the <see cref="T:Pillar.FluentRuleEngine.IPropertyRule">Rule</see>.
            </summary>
            <param name="thenClause">
                <see cref="T:System.Action`1">Action&lt;TSubject&gt;</see> to add to <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see>.
            </param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3">IPropertyRuleBuilder&lt;TContext,TSubject,TProperty&gt;</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3.Then(System.Action{`1,`0})">
            <summary>
                Adds a then <see cref="T:System.Action`2">Action&lt;TSubject,TContext&gt;</see> to the <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see>.
            </summary>
            <param name="thenClause">
                <see cref="T:System.Action`2">Action&lt;TSubject,TContext&gt;</see> to add to the <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see>.
            </param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3">IPropertyRuleBuilder&lt;TContext,TSubject,TProperty&gt;</see>.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3.WithPriority(System.Int32)">
            <summary>
                Configures the priority of the Rule.
            </summary>
            <param name="priority">
                The <see cref="T:System.Int32">int</see> priority of the rule.
            </param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3">IPropertyRuleBuilder&lt;TContext,TSubject,TProperty&gt;</see>.
            </returns>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3.PropertyRule">
            <summary>
                Gets the PropertyRule the Builder is building.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilderInitializer`2">
            <summary>
                Interface for the builder initializer of a <see cref="T:Pillar.FluentRuleEngine.IPropertyRule">Property Rule</see>.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1">context</see> for the rule.
            </typeparam>
            <typeparam name="TSubject">Type of subject for the rule.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilderInitializer`2.WithProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
                Sets the property the rule is for.
            </summary>
            <typeparam name="TProperty">
                The type of the property on the <typeparamref name="TSubject"/>subject.
            </typeparam>
            <param name="propertyExpression">The expression for the property.</param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IPropertyRuleBuilder`3">IPropertyRuleBuilder</see>.
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.ISpecificationRuleBuilderInitializer`2">
            <summary>
                Interface for the builder of a <see cref="T:Pillar.FluentRuleEngine.ISpecificationRule">Specification Rule</see>.
            </summary>
            <typeparam name="TContext">
                The type of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1">RuleEngineContext</see> for the rule.
            </typeparam>
            <typeparam name="TSubject">The type of the subject of the rule.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.ISpecificationRuleBuilderInitializer`2.WithSpecification(Pillar.Common.Specification.ISpecification{`1})">
            <summary>
                Sets the <see cref="T:Pillar.Common.Specification.ISpecification`1">Specification</see> the rule will check.
            </summary>
            <param name="specification">
                The <see cref="T:Pillar.Common.Specification.ISpecification`1">Specification</see>.
            </param>
            <returns>
                An <see cref="T:Pillar.FluentRuleEngine.Rules.IRuleBuilder`2">IRuleBuilder</see>
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.PropertyRule">
            <summary>
                Rule written for the Property of a Subject.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.PropertyRule.#ctor(System.Linq.Expressions.LambdaExpression,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.Rules.PropertyRule"/> class.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.PropertyRule.AddConstraint(Pillar.FluentRuleEngine.Constraints.IConstraint)">
            <summary>
                Adds Constraint to rule.
            </summary>
            <param name="constraint">
                <see cref="T:Pillar.FluentRuleEngine.Constraints.IConstraint"/> to add to rule.
            </param>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.PropertyRule.AutoValidate">
            <summary>
                Gets or sets a value indicating whether to auto validate.
            </summary>
            <value>
                <c>true</c> if is auto validating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.PropertyRule.Constraints">
            <summary>
                Gets the <see cref="T:System.Collections.Generic.IEnumerable`1">constraints</see> of the rule.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.PropertyRuleBuilder`3">
            <summary>
                Builder that configures <see cref="T:Pillar.FluentRuleEngine.IPropertyRule">Property Rules</see>.
            </summary>
            <typeparam name="TContext">
                Type of <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1">context</see> for the rule.
            </typeparam>
            <typeparam name="TSubject">Type of the subject for the rule.</typeparam>
            <typeparam name="TProperty">Type of the property of the subject for the rule.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.PropertyRuleBuilder`3.AutoValidate">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.PropertyRuleBuilder`3.Constrain(Pillar.FluentRuleEngine.Constraints.IConstraint)">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.PropertyRuleBuilder`3.DoNotAutoValidate">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.PropertyRuleBuilder`3.DoNotRunIfHasRuleViolation">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.PropertyRuleBuilder`3.ElseThen(System.Action{`1})">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.PropertyRuleBuilder`3.ElseThen(System.Action{`1,`0})">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.PropertyRuleBuilder`3.Then(System.Action{`1,`0})">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.PropertyRuleBuilder`3.Then(System.Action{`1})">
            <inheritdoc />
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.PropertyRuleBuilder`3.WithPriority(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Pillar.FluentRuleEngine.Rules.PropertyRuleBuilder`3.PropertyRule">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.PropertyRuleBuilderInitializer`2">
            <summary>
                Builder that initializes a <see cref="T:Pillar.FluentRuleEngine.IPropertyRule">Property Rule</see>.
            </summary>
            <typeparam name="TContext">
                Type of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1">Rule Engine Context</see> for rule.
            </typeparam>
            <typeparam name="TSubject">Type of the subject for the rule.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.PropertyRuleBuilderInitializer`2.WithProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.SpecificationRule">
            <summary>
                Rule that requires a subject to meet a <see cref="T:Pillar.Common.Specification.ISpecification`1">Specification</see>.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.SpecificationRule.CreateSpecificationRule``1(Pillar.Common.Specification.ISpecification{``0},System.String)">
            <summary>
                Creates an instance of a Specification Rule.
            </summary>
            <typeparam name="TSubject">Type of the subject of the rule.</typeparam>
            <param name="specification">Specification rule must meet.</param>
            <param name="ruleName">Name of the rule.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.Rules.SpecificationRule">Specification Rule</see>.
            </returns>
        </member>
        <member name="T:Pillar.FluentRuleEngine.Rules.SpecificationRuleBuilderInitializer`2">
            <summary>
                Builder that initializes a <see cref="T:Pillar.FluentRuleEngine.ISpecificationRule">Specification Rule</see>
            </summary>
            <typeparam name="TContext">
                Type of the <see cref="T:Pillar.FluentRuleEngine.RuleEngineContext`1">context</see> for the rule.
            </typeparam>
            <typeparam name="TSubject">Type of the subject for a rule.</typeparam>
        </member>
        <member name="M:Pillar.FluentRuleEngine.Rules.SpecificationRuleBuilderInitializer`2.WithSpecification(Pillar.Common.Specification.ISpecification{`1})">
            <inheritdoc />
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleViolation">
            <summary>
                Rule Violation from a rule.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleViolation.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleViolation"/> class.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleViolation.#ctor(Pillar.FluentRuleEngine.IRule,System.Object,System.String,System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleViolation"/> class.
            </summary>
            <param name="rule">
                <see cref="T:Pillar.FluentRuleEngine.IRule">Rule</see> that caused the violation.
            </param>
            <param name="offendingObject">Object that caused the violation.</param>
            <param name="message">Message for the Violation.</param>
            <param name="propertyNames">
                Property names of <paramref name="offendingObject">object</paramref> that caused the rule violation.
            </param>
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleViolation.Message">
            <summary>
                Gets or sets the rule violation message.
            </summary>
            <value>
                The message.
            </value>
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleViolation.OffendingObject">
            <summary>
                Gets or sets the offending object.
            </summary>
            <value>
                The offending object.
            </value>
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleViolation.PropertyNames">
            <summary>
                Gets or sets the property names of the offending object of the rule violation.
            </summary>
            <value>
                The property names.
            </value>
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleViolation.Rule">
            <summary>
                Gets or sets the rule that caused the Violation.
            </summary>
            <value>
                The rule.
            </value>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleViolationCollection">
            <summary>
                A <see cref="T:Pillar.FluentRuleEngine.IRuleViolationReporter">Rule Violation Reporter</see> that is a list of the <see cref="T:Pillar.FluentRuleEngine.RuleViolation">rule violations</see> that have been reported.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleViolationCollection.ClearViolations">
            <summary>
                Clears any current rule violations.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleViolationCollection.Publish">
            <summary>
                Publishes rule violations.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleViolationCollection.Report(Pillar.FluentRuleEngine.RuleViolation)">
            <summary>
                Adds a <see cref="T:Pillar.FluentRuleEngine.RuleViolation"/> to the RuleViolationCollection.
            </summary>
            <param name="ruleViolation">
                <see cref="T:Pillar.FluentRuleEngine.RuleViolation"/> to add.
            </param>
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleViolationCollection.HasRuleViolation">
            <summary>
                Gets a value indicating whether this instance has rule violation.
            </summary>
            <value>
                <c>true</c> if this instance has a rule violation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Pillar.FluentRuleEngine.RuleViolationException">
            <summary>
                Rule Violation Exception used for reporting a set of rule violations.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleViolationException.#ctor(System.Collections.Generic.IEnumerable{Pillar.FluentRuleEngine.RuleViolation})">
            <summary>
                Initializes a new instance of the <see cref="T:Pillar.FluentRuleEngine.RuleViolationException"/> class.
            </summary>
            <param name="ruleViolations">The rule violations.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.RuleViolationException.ToString">
            <summary>
                Creates and returns a string representation of the current exception.
            </summary>
            <returns>
                A string representation of the current exception.
            </returns>
        </member>
        <member name="P:Pillar.FluentRuleEngine.RuleViolationException.RuleViolations">
            <summary>
                Gets the rule violations.
            </summary>
        </member>
        <member name="T:Pillar.FluentRuleEngine.WorkingMemory">
            <summary>
                Class that contains the working memory for the current execution of a Rule Collection.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.WorkingMemory.#cctor">
            <summary>
                Initializes static members of the <see cref="T:Pillar.FluentRuleEngine.WorkingMemory"/> class.
            </summary>
        </member>
        <member name="M:Pillar.FluentRuleEngine.WorkingMemory.AddContextObject``1(``0)">
            <summary>
                Adds a context object to the working memory.
            </summary>
            <typeparam name="TContextObject">Type of Context Object to add.</typeparam>
            <param name="contextObject">Context Object to add.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.WorkingMemory"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.WorkingMemory.AddContextObject``1(``0,System.String)">
            <summary>
                Adds a context object to the working memory.
            </summary>
            <typeparam name="TContextObject">Type of Context Object to add.</typeparam>
            <param name="contextObject">Context Object to add.</param>
            <param name="name">Name to use for context object when added to working memory.</param>
            <returns>
                A <see cref="T:Pillar.FluentRuleEngine.WorkingMemory"/>
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.WorkingMemory.MergeWorkingMemory(Pillar.FluentRuleEngine.WorkingMemory)">
            <summary>
            Merges the working memory by taking the union of current with the passed in working memory.
            If entry exists in both sets the current entry takes precedence.
            </summary>
            <param name="workingMemory">The working memory.</param>
        </member>
        <member name="M:Pillar.FluentRuleEngine.WorkingMemory.GetContextObject``1">
            <summary>
                Gets a context object from the working memory based on type.
            </summary>
            <typeparam name="TContextObject">Type of object to get from working memory.</typeparam>
            <returns>Context object from working memory.</returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.WorkingMemory.GetContextObject(System.Type,System.String)">
            <summary>
                Gets a context object from the working memory based on type.
            </summary>
            <param name="contextObjectType">Type of ContextObject.</param>
            <param name="name">Optional Name of ContextObject. If no name the Type is used to find the ContextObject.</param>
            <returns>
                <see cref="T:System.Object">Object</see> that is the Context Object.
            </returns>
        </member>
        <member name="M:Pillar.FluentRuleEngine.WorkingMemory.GetContextObject``1(System.String)">
            <summary>
                Gets a context object from the working memory based on a name.
            </summary>
            <typeparam name="TContextObject">Type of object to get from working memory.</typeparam>
            <param name="name">Name of object to get from working memory.</param>
            <returns>Context object from working memory.</returns>
        </member>
    </members>
</doc>
