@using ProCenter.Common
@using ProCenter.Mvc.Infrastructure.Extension
@using ProCenter.Mvc.Views.Patient
@using ProCenter.Mvc.Views.ReportsCenter
@model ProCenter.Service.Message.Patient.PatientDto

@{
    var patientKey = Model == null ? string.Empty : Model.Key.ToString();
    var patientFullName = Model == null ? string.Empty : Model.Name.FullName;
    ViewBag.Title = Patient.PatientIndexTitle;
}

@section subnav{
    <div class="sub-nav">
        <div class="patient-header row-fluid">
            @Html.DisplayFor(m => ViewData["Patient"], new { CanEdit = true })
            <div id="assessment-create" class="assessment-tools">
                @if (Html.CanAccess("Assessment", "Create"))
                {
                    <input id="assessment-search" aria-label="@Patient.SearchAssessment" type="text" placeholder="@Patient.Search" data-control="finder" data-ajaxform-ignore="true" data-finder-url="/api/Organization/FinderSearchActive" data-finder-display="AssessmentName" />
                    <div style="float: right;">
                        <div style="position: relative;" id="create-assessment-outer-div">
                            <a data-toggle="dropdown" class="dropdown-toggle" id="assessment-dropdown-toggle">
                                <span class="fs1 add-btn btn btn-success" id="assessment-add-btn" aria-label="Click to create an assessment" data-icon="&#xe102;" disabled="disabled">Create Assessment</span>
                            </a>
                            <ul class="dropdown-menu assessment-create-dropdown">
                                <li>
                                    <a title="@Patient.CreateAssessment" class="add-btn" aria-label="@Patient.TakeAssessmentNow">@Patient.CreateAssessment</a>    
                                </li>
                                <li>
                                    <a title="@Patient.CreateSelfAdministeredAssessment" aria-label="@Patient.CreateSelfAssessment" onclick="return checkAccount('@Model.HasAccount.ToString()', '@Model.Name.FullName');" class="self-admin-add-btn">@Patient.CreateSelfAdministeredAssessment</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                }
            </div>
            <div class="clearfix"></div>
        </div>
    </div>
}

<div class="dashboard-wrapper full-height">
    <div class="patient-dashboard">
        <div class="left">
            @if (Html.CanAccess("Patient", "PatientFeed"))
            {
                @Html.Partial("../Widgets/PatientFeed")
            }
        </div>
        <div class="right">
            @if (Html.CanAccess("Report", "Get"))
            {
                @Html.Partial("../Widgets/PatientReports")
            }
            @if (Html.CanAccess("Assessment", "Edit"))
            {
                @Html.Partial("../Widgets/PatientRecentAssessments")
            }
            @if (Html.CanAccess("AssessmentReminder", "Get"))
            {
                @Html.Partial("../Widgets/AssessmentReminderPartial")
            }
        </div>
        <div class="clearfix"></div>
    </div>
    <div id="ajax-loader" style="display: none"></div>
</div>

@section scripts 
{
    @if (Model != null)
    {
        @Scripts.Render("~/bundles/patient")
        <script>
            function checkAccount(hasAccount, patientName) {
                if (hasAccount == "False") {
                    var msg = '@Patient.MustHaveAnAccount';
                    msg = msg.replace("{0}", '"' + patientName + '"');
                    var headerText = '@Patient.Warning';
                    $("#messageModalHeader").text(headerText);
                    $('#messageModal .modal-body').text(msg);
                    $("#messageModal").modal("show");
                    return false;
                }
                return true;
            }

            $(document).ready(function() {
                var canViewReports = @Html.CanAccess("Report", "Get").ToString().ToLower();
                if (canViewReports) {
                    var canCustomizeReport = @Html.CanAccess("Report", "Customize").ToString().ToLower();
                    window.procenter.InitializePatientReports('@Url.Content("~/Assessment")', '@Url.Content("~/api/Assessment")', '@patientKey', '@Url.Action("Get", "Report")', '@Url.Action("Customize", "Report")', canCustomizeReport);
                }

                var canViewPatientFeed = @Html.CanAccess("Assessment", "PatientFeed").ToString().ToLower();
                if (canViewPatientFeed) {
                    window.procenter.InitializePatientFeed('@Url.Content("~/Patient")', '@patientKey');
                }

                var canViewPatientAssessments = @Html.CanAccess("Assessment", "Edit").ToString().ToLower();
                if (canViewPatientAssessments) {
                    var canEditAssessments = @Html.CanAccess("Assessment", "Edit", "POST").ToString().ToLower();
                    window.procenter.InitializePatientRecentAssessments('@Url.Content("~/api/PatientAssessmentsDataTable")', '@patientKey', '@Url.Action("Edit", "Assessment")', canEditAssessments);
                }

                var canViewReminders = @Html.CanAccess("AssessmentReminder", "Get").ToString().ToLower();
                if (canViewReminders) {
                    var canEditReminders = @Html.CanAccess("AssessmentReminder", "Edit", "POST").ToString().ToLower();
                    window.procenter.InitializeReminders('@Url.Content("~/AssessmentReminder")', '@Url.Content("~/api/AssessmentReminder")', canEditReminders, '@patientKey', '@patientFullName', '@DateTime.Today' );
                }

                var systemAccountKey = '@UserContext.Current.SystemAccountKey';

                window.procenter.InitializeReportBuilder('@Url.Content("~/Report/")', systemAccountKey, null, '@ReportsCenter.NoAssessmentWarning', new Array('@ReportsCenter.HeightUnit1', '@ReportsCenter.HeightUnit2'));

                $("#assessment-add-btn").on("click", function(e) {
                    var selected = $('#assessment-search').data('finder').selectedData !== undefined && $('#assessment-search').data('finder').selectedData != null;
                    if (!selected) {
                        e.stopPropagation();
                    } 
                });

                $('#assessment-create').on('selectionChanged', function(evt, data) {
                    $("#create-assessment-outer-div").removeClass("open");
                    if (data && $('#' + data.Key).length === 0) {
                        $("#assessment-add-btn").removeAttr("disabled");
                        $('#assessment-create a.add-btn').removeAttr("disabled").attr("href", '@Url.Content("~/Assessment")' + '/Create?patientKey=' + '@patientKey' + '&assessmentDefinitionKey=' + data.Key);
                        $('#assessment-create a.self-admin-add-btn').removeAttr("disabled").attr("href", '@Url.Content("~/Assessment")' + '/CreateForSelfAdministration?patientKey=' + '@patientKey' + '&assessmentDefinitionKey=' + data.Key);
                    } else {
                        $("#assessment-add-btn").attr("disabled", "disabled");
                        $('#assessment-create a.add-btn').attr("disabled", "disabled").attr("href", null);
                        $('#assessment-create a.self-admin-add-btn').attr("disabled", "disabled").attr("href", null);
                    }
                });
            });
        </script>
        <noscript>@Patient.JavascriptNotEnabled</noscript>
    }
}